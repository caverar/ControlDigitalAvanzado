
stm32f401_xB_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035fc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a0  080037a0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a8  080037a8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080037b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf0  200000d0  08003880  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  08003880  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091f8  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000193b  00000000  00000000  0002933b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  0002b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f99  00000000  00000000  0002be56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4cf  00000000  00000000  00041def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b187  00000000  00000000  0004d2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000297c  00000000  00000000  000d8448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000dadc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000d0 	.word	0x200000d0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003778 	.word	0x08003778

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d4 	.word	0x200000d4
 80001d0:	08003778 	.word	0x08003778

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <AutoRearmTrigger>:
  * @brief  Re arm the trigger
  * @param  None
  * @retval None
  */
void AutoRearmTrigger(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  bAutoRearmAfterOVF = 0;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <AutoRearmTrigger+0x28>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
  g_internalTrigState = WAITING_LEVEL_BEFORE;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <AutoRearmTrigger+0x2c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
  g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <AutoRearmTrigger+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2201      	movs	r2, #1
 80004e6:	619a      	str	r2, [r3, #24]
  g_nbRecords = 0;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <AutoRearmTrigger+0x34>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	2000011c 	.word	0x2000011c
 80004fc:	200000f0 	.word	0x200000f0
 8000500:	200000ec 	.word	0x200000ec
 8000504:	20000114 	.word	0x20000114

08000508 <SetTriggerOverflow>:
  * @brief  Manage overflow event
  * @param  overflow state
  * @retval None
  */
void SetTriggerOverflow(int32_t overflow)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  g_overflow = overflow;
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <SetTriggerOverflow+0x40>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6013      	str	r3, [r2, #0]
  if ((overflow == 0) && (bAutoRearmAfterOVF == 1))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <SetTriggerOverflow+0x38>
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <SetTriggerOverflow+0x44>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d10d      	bne.n	8000540 <SetTriggerOverflow+0x38>
  {
    if (g_binternalIgnoreTrig)
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <SetTriggerOverflow+0x48>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <SetTriggerOverflow+0x34>
    {
      /* Do not immediately rearm the trigger in that case, but wait for the buffer to be completely empty */
      g_internalTrigState = WAITING_BUFFER_EMPTY;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <SetTriggerOverflow+0x4c>)
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <SetTriggerOverflow+0x50>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2201      	movs	r2, #1
 8000538:	619a      	str	r2, [r3, #24]
    {
      /* It's now time to rearm the trigger after OVF stop */
      AutoRearmTrigger();
    }
  }
}
 800053a:	e001      	b.n	8000540 <SetTriggerOverflow+0x38>
      AutoRearmTrigger();
 800053c:	f7ff ffc8 	bl	80004d0 <AutoRearmTrigger>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000118 	.word	0x20000118
 800054c:	2000011c 	.word	0x2000011c
 8000550:	200000fc 	.word	0x200000fc
 8000554:	200000f0 	.word	0x200000f0
 8000558:	200000ec 	.word	0x200000ec

0800055c <AddingNewRecord>:
  * @note   useful for stop after N
  * @param  None
  * @retval None
  */
void AddingNewRecord(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  g_nbRecords++;
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <AddingNewRecord+0x18>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a03      	ldr	r2, [pc, #12]	; (8000574 <AddingNewRecord+0x18>)
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	20000114 	.word	0x20000114

08000578 <AcqConfigureTrigger>:
  *         To call at least once by recording session
  * @param  None
  * @retval None
  */
void AcqConfigureTrigger(__IO TraceHeaderTrigger_t *pTrigConfig)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  g_pTriggerConf = pTrigConfig;
 8000580:	4a41      	ldr	r2, [pc, #260]	; (8000688 <AcqConfigureTrigger+0x110>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]

  g_internalTrigState = INTERNAL_STATE_STOPPED;
 8000586:	4b41      	ldr	r3, [pc, #260]	; (800068c <AcqConfigureTrigger+0x114>)
 8000588:	2203      	movs	r2, #3
 800058a:	601a      	str	r2, [r3, #0]
  /* Process some fields once and for all for better runtime performance
     (type conversion) */
  if (pTrigConfig->mode == 0)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d103      	bne.n	800059c <AcqConfigureTrigger+0x24>
  {
    /* No trigger configured (= immediate start + never stop) */
    g_internalTrigMode = MODE_NO_TRIGGER;
 8000594:	4b3e      	ldr	r3, [pc, #248]	; (8000690 <AcqConfigureTrigger+0x118>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e00a      	b.n	80005b2 <AcqConfigureTrigger+0x3a>
  }
  else
  {
    if (pTrigConfig->nPreTrig == 0)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d103      	bne.n	80005ac <AcqConfigureTrigger+0x34>
    {
      g_internalTrigMode = MODE_TRIGGER_NO_PRETRIG;
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <AcqConfigureTrigger+0x118>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	e002      	b.n	80005b2 <AcqConfigureTrigger+0x3a>
    }
    else
    {
      g_internalTrigMode = MODE_TRIGGER_WITH_PRETRIG;
 80005ac:	4b38      	ldr	r3, [pc, #224]	; (8000690 <AcqConfigureTrigger+0x118>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pTrigConfig->bIgnoreTrig == 1)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6a1b      	ldr	r3, [r3, #32]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d103      	bne.n	80005c2 <AcqConfigureTrigger+0x4a>
  {
    g_binternalIgnoreTrig = 1;
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <AcqConfigureTrigger+0x11c>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e002      	b.n	80005c8 <AcqConfigureTrigger+0x50>
  }
  else
  {
    g_binternalIgnoreTrig = 0;
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <AcqConfigureTrigger+0x11c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
  }

  if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_8BIT)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d109      	bne.n	80005e4 <AcqConfigureTrigger+0x6c>
  {
    g_internalType = SNP_TRC_DATA_ACCESS_8BIT;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <AcqConfigureTrigger+0x120>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
    g_threshold_s8 = (int8_t)g_pTriggerConf->threshold;
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <AcqConfigureTrigger+0x110>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <AcqConfigureTrigger+0x124>)
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	e03f      	b.n	8000664 <AcqConfigureTrigger+0xec>
  }
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_16BIT)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d109      	bne.n	8000600 <AcqConfigureTrigger+0x88>
  {
    g_internalType = SNP_TRC_DATA_ACCESS_16BIT;
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <AcqConfigureTrigger+0x120>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
    g_threshold_s16 = (int16_t)g_pTriggerConf->threshold;
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <AcqConfigureTrigger+0x110>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	b21a      	sxth	r2, r3
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <AcqConfigureTrigger+0x128>)
 80005fc:	801a      	strh	r2, [r3, #0]
 80005fe:	e031      	b.n	8000664 <AcqConfigureTrigger+0xec>
#ifdef STM32F0XX
    /* On Cortex M0, the LDRH instruction requires to be 16-bits aligned */
    g_pTriggerConf->address &= 0xFFFFFFFEUL;
#endif /* STM32F0XX */
  }
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_32BIT)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d109      	bne.n	800061c <AcqConfigureTrigger+0xa4>
  {
    g_internalType = SNP_TRC_DATA_ACCESS_32BIT;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <AcqConfigureTrigger+0x120>)
 800060a:	2202      	movs	r2, #2
 800060c:	601a      	str	r2, [r3, #0]
    g_threshold_s32 = (int32_t)g_pTriggerConf->threshold;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <AcqConfigureTrigger+0x110>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	461a      	mov	r2, r3
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <AcqConfigureTrigger+0x12c>)
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e023      	b.n	8000664 <AcqConfigureTrigger+0xec>
#ifdef STM32F0XX
    /* On Cortex M0, the LDR instruction requires to be 32-bits aligned */
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
#endif /* STM32F0XX */
  }
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_U8)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b04      	cmp	r3, #4
 8000622:	d109      	bne.n	8000638 <AcqConfigureTrigger+0xc0>
  {
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U8;
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <AcqConfigureTrigger+0x120>)
 8000626:	2204      	movs	r2, #4
 8000628:	601a      	str	r2, [r3, #0]
    g_threshold_u8 = (uint8_t)g_pTriggerConf->threshold;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <AcqConfigureTrigger+0x110>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <AcqConfigureTrigger+0x130>)
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e015      	b.n	8000664 <AcqConfigureTrigger+0xec>
  }
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_U16)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2b05      	cmp	r3, #5
 800063e:	d109      	bne.n	8000654 <AcqConfigureTrigger+0xdc>
  {
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U16;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <AcqConfigureTrigger+0x120>)
 8000642:	2205      	movs	r2, #5
 8000644:	601a      	str	r2, [r3, #0]
    g_threshold_u16 = (uint16_t)g_pTriggerConf->threshold;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <AcqConfigureTrigger+0x110>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <AcqConfigureTrigger+0x134>)
 8000650:	801a      	strh	r2, [r3, #0]
 8000652:	e007      	b.n	8000664 <AcqConfigureTrigger+0xec>
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
  }
#endif /* USING_TRIGGER_ON_DOUBLE */
  else
  {
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U32;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <AcqConfigureTrigger+0x120>)
 8000656:	2206      	movs	r2, #6
 8000658:	601a      	str	r2, [r3, #0]
    g_threshold_u32 = (uint32_t)g_pTriggerConf->threshold;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <AcqConfigureTrigger+0x110>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <AcqConfigureTrigger+0x138>)
 8000662:	6013      	str	r3, [r2, #0]
    /* On Cortex M0, the LDR instruction requires to be 32-bits aligned */
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
#endif /* STM32F0XX */
  }

  if (pTrigConfig->mode & SNP_TRC_TRIGGER_STOP_N_REC)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <AcqConfigureTrigger+0x104>
  {
    g_stopAfterRecords = (int32_t)g_pTriggerConf->stopParam;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <AcqConfigureTrigger+0x110>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	461a      	mov	r2, r3
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <AcqConfigureTrigger+0x13c>)
 800067a:	601a      	str	r2, [r3, #0]
  }
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	200000ec 	.word	0x200000ec
 800068c:	200000f0 	.word	0x200000f0
 8000690:	200000f4 	.word	0x200000f4
 8000694:	200000fc 	.word	0x200000fc
 8000698:	200000f8 	.word	0x200000f8
 800069c:	20000101 	.word	0x20000101
 80006a0:	20000104 	.word	0x20000104
 80006a4:	2000010c 	.word	0x2000010c
 80006a8:	20000100 	.word	0x20000100
 80006ac:	20000102 	.word	0x20000102
 80006b0:	20000108 	.word	0x20000108
 80006b4:	20000110 	.word	0x20000110

080006b8 <manageTrigEvent>:
  * @note   Common code used twice in AcqEvaluateTrigger
  * @param  None
  * @retval status
  */
static int32_t manageTrigEvent(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  if (g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG)
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <manageTrigEvent+0x30>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d008      	beq.n	80006d6 <manageTrigEvent+0x1e>
  {
    g_pTriggerConf->state = SNP_TRC_TRIGGER_TRIGGED;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <manageTrigEvent+0x34>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2202      	movs	r2, #2
 80006ca:	619a      	str	r2, [r3, #24]
    g_internalTrigState = INTERNAL_STATE_TRIGGED;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <manageTrigEvent+0x38>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
    return TRIG_EVAL_POST_REC;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e003      	b.n	80006de <manageTrigEvent+0x26>
  else
  {
    /* In pretrig mode the SNP_TRC_TRIGGER_TRIGGED is used by the host as
       trigger signal; so must be set only after read/write pointers are OK
       in the shared header */
    g_internalTrigState = INTERNAL_STATE_TRIGGED;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <manageTrigEvent+0x38>)
 80006d8:	2204      	movs	r2, #4
 80006da:	601a      	str	r2, [r3, #0]
    return TRIG_EVAL_EVENT;
 80006dc:	2302      	movs	r3, #2
  }
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	200000f4 	.word	0x200000f4
 80006ec:	200000ec 	.word	0x200000ec
 80006f0:	200000f0 	.word	0x200000f0

080006f4 <AcqEvaluateTrigger>:
                 - no trigger is configured
                 - a trigger was configured, started and the condition is hit.
            Returns 0 otherwise.
  */
int32_t AcqEvaluateTrigger(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  if (g_internalTrigMode == MODE_NO_TRIGGER)
 80006f8:	4b51      	ldr	r3, [pc, #324]	; (8000840 <AcqEvaluateTrigger+0x14c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <AcqEvaluateTrigger+0x10>
  {
    /* No trigger configured => trace all */
    return TRIG_EVAL_POST_REC;
 8000700:	2301      	movs	r3, #1
 8000702:	e09b      	b.n	800083c <AcqEvaluateTrigger+0x148>
  }
  if (g_internalTrigState == INTERNAL_STATE_TRIGGED)
 8000704:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <AcqEvaluateTrigger+0x150>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b04      	cmp	r3, #4
 800070a:	d103      	bne.n	8000714 <AcqEvaluateTrigger+0x20>
  {
    /* Event already trigged: continue until end event (stop command, ...) */
    return evaluateEnd();
 800070c:	f000 fa14 	bl	8000b38 <evaluateEnd>
 8000710:	4603      	mov	r3, r0
 8000712:	e093      	b.n	800083c <AcqEvaluateTrigger+0x148>
  }
  if (g_internalTrigState == INTERNAL_STATE_STOPPED)
 8000714:	4b4b      	ldr	r3, [pc, #300]	; (8000844 <AcqEvaluateTrigger+0x150>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d12f      	bne.n	800077c <AcqEvaluateTrigger+0x88>
  {
    /* Check if start asked */
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_START)
 800071c:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <AcqEvaluateTrigger+0x154>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	2b00      	cmp	r3, #0
 8000728:	d026      	beq.n	8000778 <AcqEvaluateTrigger+0x84>
    {
      g_nbRecords = 0;
 800072a:	4b48      	ldr	r3, [pc, #288]	; (800084c <AcqEvaluateTrigger+0x158>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
      if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_START_MASK) == SNP_TRC_TRIGGER_START_IMMEDIATE)
 8000730:	4b45      	ldr	r3, [pc, #276]	; (8000848 <AcqEvaluateTrigger+0x154>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	2b00      	cmp	r3, #0
 800073c:	d108      	bne.n	8000750 <AcqEvaluateTrigger+0x5c>
      {
        g_pTriggerConf->state = SNP_TRC_TRIGGER_TRIGGED;
 800073e:	4b42      	ldr	r3, [pc, #264]	; (8000848 <AcqEvaluateTrigger+0x154>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2202      	movs	r2, #2
 8000744:	619a      	str	r2, [r3, #24]
        g_internalTrigState = INTERNAL_STATE_TRIGGED;
 8000746:	4b3f      	ldr	r3, [pc, #252]	; (8000844 <AcqEvaluateTrigger+0x150>)
 8000748:	2204      	movs	r2, #4
 800074a:	601a      	str	r2, [r3, #0]
        return TRIG_EVAL_POST_REC;
 800074c:	2301      	movs	r3, #1
 800074e:	e075      	b.n	800083c <AcqEvaluateTrigger+0x148>
      }
      /* Init state variables */
      if (g_internalTrigMode == MODE_TRIGGER_NO_PRETRIG)
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <AcqEvaluateTrigger+0x14c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d107      	bne.n	8000768 <AcqEvaluateTrigger+0x74>
      {
        g_internalTrigState = WAITING_LEVEL_BEFORE;
 8000758:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <AcqEvaluateTrigger+0x150>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
        g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <AcqEvaluateTrigger+0x154>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2201      	movs	r2, #1
 8000764:	619a      	str	r2, [r3, #24]
 8000766:	e009      	b.n	800077c <AcqEvaluateTrigger+0x88>
      }
      else
      {
        g_internalTrigState = WAITING_BUFFER_EMPTY;
 8000768:	4b36      	ldr	r3, [pc, #216]	; (8000844 <AcqEvaluateTrigger+0x150>)
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]
        g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 800076e:	4b36      	ldr	r3, [pc, #216]	; (8000848 <AcqEvaluateTrigger+0x154>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2201      	movs	r2, #1
 8000774:	619a      	str	r2, [r3, #24]
 8000776:	e001      	b.n	800077c <AcqEvaluateTrigger+0x88>
      }
    }
    else
    {
      return TRIG_EVAL_NO_REC;
 8000778:	2300      	movs	r3, #0
 800077a:	e05f      	b.n	800083c <AcqEvaluateTrigger+0x148>
    }
  }
  if (g_pTriggerConf->state == SNP_TRC_TRIGGER_STARTED)
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <AcqEvaluateTrigger+0x154>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d153      	bne.n	800082e <AcqEvaluateTrigger+0x13a>
  {
    /* Check if stop asked */
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP)
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <AcqEvaluateTrigger+0x154>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	691b      	ldr	r3, [r3, #16]
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
      g_internalTrigState = INTERNAL_STATE_STOPPED;
      return TRIG_EVAL_NO_REC;
    }

    if (g_internalTrigState == WAITING_BUFFER_EMPTY)
 800078c:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <AcqEvaluateTrigger+0x150>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d109      	bne.n	80007a8 <AcqEvaluateTrigger+0xb4>
    {
      if (IsBufferEmpty() == 1)
 8000794:	f000 fa98 	bl	8000cc8 <IsBufferEmpty>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d102      	bne.n	80007a4 <AcqEvaluateTrigger+0xb0>
      {
        /* Buffer is now empty; we can restart pre-triggering */
        AutoRearmTrigger();
 800079e:	f7ff fe97 	bl	80004d0 <AutoRearmTrigger>
 80007a2:	e001      	b.n	80007a8 <AcqEvaluateTrigger+0xb4>
           because we should evaluate the first trigger level */
      }
      else
      {
        /* Buffer is still not empty; must wait for it to be flushed */
        return TRIG_EVAL_PRE1_REC;
 80007a4:	2303      	movs	r3, #3
 80007a6:	e049      	b.n	800083c <AcqEvaluateTrigger+0x148>
      }
    }

    /* Check against trigger condition: edge detected as 2 levels */
    if (g_internalTrigState == WAITING_LEVEL_BEFORE)
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <AcqEvaluateTrigger+0x150>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d117      	bne.n	80007e0 <AcqEvaluateTrigger+0xec>
    {
      if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_FALLING)
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <AcqEvaluateTrigger+0x154>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d008      	beq.n	80007d0 <AcqEvaluateTrigger+0xdc>
      {
        /* For falling edge detection, the level before must be above the threshold */
        if (valAboveThreshold())
 80007be:	f000 f847 	bl	8000850 <valAboveThreshold>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00b      	beq.n	80007e0 <AcqEvaluateTrigger+0xec>
        {
          g_internalTrigState = WAITING_LEVEL_AFTER;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <AcqEvaluateTrigger+0x150>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	e007      	b.n	80007e0 <AcqEvaluateTrigger+0xec>
        }
      }
      else
      {
        /* For rising edge detection, the level before must be below the threshold */
        if (valBelowThreshold())
 80007d0:	f000 f8ba 	bl	8000948 <valBelowThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <AcqEvaluateTrigger+0xec>
        {
          g_internalTrigState = WAITING_LEVEL_AFTER;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <AcqEvaluateTrigger+0x150>)
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
        }
      }
    }
    if (g_internalTrigState == WAITING_LEVEL_AFTER)
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <AcqEvaluateTrigger+0x150>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d122      	bne.n	800082e <AcqEvaluateTrigger+0x13a>
    {
      if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_FALLING)
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <AcqEvaluateTrigger+0x154>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00d      	beq.n	8000812 <AcqEvaluateTrigger+0x11e>
      {
        /* For falling edge detection, the level after must be below the threshold */
        if (valBelowThreshold() || valEqualsThreshold())
 80007f6:	f000 f8a7 	bl	8000948 <valBelowThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d104      	bne.n	800080a <AcqEvaluateTrigger+0x116>
 8000800:	f000 f91e 	bl	8000a40 <valEqualsThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d011      	beq.n	800082e <AcqEvaluateTrigger+0x13a>
        {
          /* Event occurred */
          return manageTrigEvent();
 800080a:	f7ff ff55 	bl	80006b8 <manageTrigEvent>
 800080e:	4603      	mov	r3, r0
 8000810:	e014      	b.n	800083c <AcqEvaluateTrigger+0x148>
        }
      }
      else
      {
        /* For rising edge detection, the level after must be above the threshold */
        if (valAboveThreshold() || valEqualsThreshold())
 8000812:	f000 f81d 	bl	8000850 <valAboveThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d104      	bne.n	8000826 <AcqEvaluateTrigger+0x132>
 800081c:	f000 f910 	bl	8000a40 <valEqualsThreshold>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <AcqEvaluateTrigger+0x13a>
        {
          /* Event occurred */
          return manageTrigEvent();
 8000826:	f7ff ff47 	bl	80006b8 <manageTrigEvent>
 800082a:	4603      	mov	r3, r0
 800082c:	e006      	b.n	800083c <AcqEvaluateTrigger+0x148>
        }
      }
    }
  }
  /* Nothing to trace or pre-triggering */
  if (g_internalTrigMode == MODE_TRIGGER_WITH_PRETRIG)
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <AcqEvaluateTrigger+0x14c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d101      	bne.n	800083a <AcqEvaluateTrigger+0x146>
  {
    return TRIG_EVAL_PRE2_REC;
 8000836:	2304      	movs	r3, #4
 8000838:	e000      	b.n	800083c <AcqEvaluateTrigger+0x148>
  }
  else
  {
    return TRIG_EVAL_NO_REC;
 800083a:	2300      	movs	r3, #0
  }
}
 800083c:	4618      	mov	r0, r3
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000f4 	.word	0x200000f4
 8000844:	200000f0 	.word	0x200000f0
 8000848:	200000ec 	.word	0x200000ec
 800084c:	20000114 	.word	0x20000114

08000850 <valAboveThreshold>:
  * @brief  check if trigger value is above threshold
  * @param  None
  * @retval true if above
  */
int32_t valAboveThreshold(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  switch (g_internalType)
 8000854:	4b34      	ldr	r3, [pc, #208]	; (8000928 <valAboveThreshold+0xd8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b06      	cmp	r3, #6
 800085a:	d85d      	bhi.n	8000918 <valAboveThreshold+0xc8>
 800085c:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <valAboveThreshold+0x14>)
 800085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000862:	bf00      	nop
 8000864:	08000881 	.word	0x08000881
 8000868:	0800089d 	.word	0x0800089d
 800086c:	080008b9 	.word	0x080008b9
 8000870:	08000919 	.word	0x08000919
 8000874:	080008d1 	.word	0x080008d1
 8000878:	080008e9 	.word	0x080008e9
 800087c:	08000901 	.word	0x08000901
  {
    case SNP_TRC_DATA_ACCESS_8BIT:
      return ((*(_FAR_DATA_ int8_t *)g_pTriggerConf->address) > g_threshold_s8) ? 1 : 0;
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <valAboveThreshold+0xdc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f993 2000 	ldrsb.w	r2, [r3]
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <valAboveThreshold+0xe0>)
 800088c:	f993 3000 	ldrsb.w	r3, [r3]
 8000890:	429a      	cmp	r2, r3
 8000892:	bfcc      	ite	gt
 8000894:	2301      	movgt	r3, #1
 8000896:	2300      	movle	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	e03f      	b.n	800091c <valAboveThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_16BIT:
      return ((*(_FAR_DATA_ int16_t *)g_pTriggerConf->address) > g_threshold_s16) ? 1 : 0;
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <valAboveThreshold+0xdc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <valAboveThreshold+0xe4>)
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	bfcc      	ite	gt
 80008b0:	2301      	movgt	r3, #1
 80008b2:	2300      	movle	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	e031      	b.n	800091c <valAboveThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_32BIT:
      return ((*(_FAR_DATA_ int32_t *)g_pTriggerConf->address) > g_threshold_s32) ? 1 : 0;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <valAboveThreshold+0xdc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <valAboveThreshold+0xe8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	bfcc      	ite	gt
 80008c8:	2301      	movgt	r3, #1
 80008ca:	2300      	movle	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	e025      	b.n	800091c <valAboveThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U8:
      return ((*(_FAR_DATA_ uint8_t *)g_pTriggerConf->address) > g_threshold_u8) ? 1 : 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <valAboveThreshold+0xdc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <valAboveThreshold+0xec>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	bf8c      	ite	hi
 80008e0:	2301      	movhi	r3, #1
 80008e2:	2300      	movls	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	e019      	b.n	800091c <valAboveThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U16:
      return ((*(_FAR_DATA_ uint16_t *)g_pTriggerConf->address) > g_threshold_u16) ? 1 : 0;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <valAboveThreshold+0xdc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	881a      	ldrh	r2, [r3, #0]
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <valAboveThreshold+0xf0>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	bf8c      	ite	hi
 80008f8:	2301      	movhi	r3, #1
 80008fa:	2300      	movls	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	e00d      	b.n	800091c <valAboveThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U32:
      return ((*(_FAR_DATA_ uint32_t *)g_pTriggerConf->address) > g_threshold_u32) ? 1 : 0;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <valAboveThreshold+0xdc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <valAboveThreshold+0xf4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	bf8c      	ite	hi
 8000910:	2301      	movhi	r3, #1
 8000912:	2300      	movls	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	e001      	b.n	800091c <valAboveThreshold+0xcc>
#ifdef USING_TRIGGER_ON_DOUBLE
    case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
      return ((*(_FAR_DATA_ double *)g_pTriggerConf->address) > g_threshold_double) ? 1 : 0;
#endif /* USING_TRIGGER_ON_DOUBLE */
    default:
      break;
 8000918:	bf00      	nop
  }
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	200000f8 	.word	0x200000f8
 800092c:	200000ec 	.word	0x200000ec
 8000930:	20000101 	.word	0x20000101
 8000934:	20000104 	.word	0x20000104
 8000938:	2000010c 	.word	0x2000010c
 800093c:	20000100 	.word	0x20000100
 8000940:	20000102 	.word	0x20000102
 8000944:	20000108 	.word	0x20000108

08000948 <valBelowThreshold>:
  * @brief  check if trigger value is below threshold
  * @param  None
  * @retval true if below
  */
int32_t valBelowThreshold(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  switch (g_internalType)
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <valBelowThreshold+0xd8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b06      	cmp	r3, #6
 8000952:	d85d      	bhi.n	8000a10 <valBelowThreshold+0xc8>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <valBelowThreshold+0x14>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	08000979 	.word	0x08000979
 8000960:	08000995 	.word	0x08000995
 8000964:	080009b1 	.word	0x080009b1
 8000968:	08000a11 	.word	0x08000a11
 800096c:	080009c9 	.word	0x080009c9
 8000970:	080009e1 	.word	0x080009e1
 8000974:	080009f9 	.word	0x080009f9
  {
    case SNP_TRC_DATA_ACCESS_8BIT:
      return ((*(_FAR_DATA_ int8_t *)g_pTriggerConf->address) < g_threshold_s8) ? 1 : 0;
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <valBelowThreshold+0xdc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f993 2000 	ldrsb.w	r2, [r3]
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <valBelowThreshold+0xe0>)
 8000984:	f993 3000 	ldrsb.w	r3, [r3]
 8000988:	429a      	cmp	r2, r3
 800098a:	bfb4      	ite	lt
 800098c:	2301      	movlt	r3, #1
 800098e:	2300      	movge	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	e03f      	b.n	8000a14 <valBelowThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_16BIT:
      return ((*(_FAR_DATA_ int16_t *)g_pTriggerConf->address) < g_threshold_s16) ? 1 : 0;
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <valBelowThreshold+0xdc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <valBelowThreshold+0xe4>)
 80009a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	bfb4      	ite	lt
 80009a8:	2301      	movlt	r3, #1
 80009aa:	2300      	movge	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	e031      	b.n	8000a14 <valBelowThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_32BIT:
      return ((*(_FAR_DATA_ int32_t *)g_pTriggerConf->address) < g_threshold_s32) ? 1 : 0;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <valBelowThreshold+0xdc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <valBelowThreshold+0xe8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	bfb4      	ite	lt
 80009c0:	2301      	movlt	r3, #1
 80009c2:	2300      	movge	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	e025      	b.n	8000a14 <valBelowThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U8:
      return ((*(_FAR_DATA_ uint8_t *)g_pTriggerConf->address) < g_threshold_u8) ? 1 : 0;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <valBelowThreshold+0xdc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <valBelowThreshold+0xec>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	bf34      	ite	cc
 80009d8:	2301      	movcc	r3, #1
 80009da:	2300      	movcs	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	e019      	b.n	8000a14 <valBelowThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U16:
      return ((*(_FAR_DATA_ uint16_t *)g_pTriggerConf->address) < g_threshold_u16) ? 1 : 0;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <valBelowThreshold+0xdc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	881a      	ldrh	r2, [r3, #0]
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <valBelowThreshold+0xf0>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	bf34      	ite	cc
 80009f0:	2301      	movcc	r3, #1
 80009f2:	2300      	movcs	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	e00d      	b.n	8000a14 <valBelowThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U32:
      return ((*(_FAR_DATA_ uint32_t *)g_pTriggerConf->address) < g_threshold_u32) ? 1 : 0;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <valBelowThreshold+0xdc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <valBelowThreshold+0xf4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	bf34      	ite	cc
 8000a08:	2301      	movcc	r3, #1
 8000a0a:	2300      	movcs	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	e001      	b.n	8000a14 <valBelowThreshold+0xcc>
#ifdef USING_TRIGGER_ON_DOUBLE
    case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
      return ((*(_FAR_DATA_ double *)g_pTriggerConf->address) < g_threshold_double) ? 1 : 0;
#endif /* USING_TRIGGER_ON_DOUBLE */
    default:
      break;
 8000a10:	bf00      	nop
  }
  return 0;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200000f8 	.word	0x200000f8
 8000a24:	200000ec 	.word	0x200000ec
 8000a28:	20000101 	.word	0x20000101
 8000a2c:	20000104 	.word	0x20000104
 8000a30:	2000010c 	.word	0x2000010c
 8000a34:	20000100 	.word	0x20000100
 8000a38:	20000102 	.word	0x20000102
 8000a3c:	20000108 	.word	0x20000108

08000a40 <valEqualsThreshold>:
  * @brief  check if trigger value equals threshold
  * @param  None
  * @retval true if equals
  */
int32_t valEqualsThreshold(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  switch (g_internalType)
 8000a44:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <valEqualsThreshold+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b06      	cmp	r3, #6
 8000a4a:	d85d      	bhi.n	8000b08 <valEqualsThreshold+0xc8>
 8000a4c:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <valEqualsThreshold+0x14>)
 8000a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a52:	bf00      	nop
 8000a54:	08000a71 	.word	0x08000a71
 8000a58:	08000a8d 	.word	0x08000a8d
 8000a5c:	08000aa9 	.word	0x08000aa9
 8000a60:	08000b09 	.word	0x08000b09
 8000a64:	08000ac1 	.word	0x08000ac1
 8000a68:	08000ad9 	.word	0x08000ad9
 8000a6c:	08000af1 	.word	0x08000af1
  {
    case SNP_TRC_DATA_ACCESS_8BIT:
      return ((*(_FAR_DATA_ int8_t *)g_pTriggerConf->address) == g_threshold_s8) ? 1 : 0;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <valEqualsThreshold+0xdc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f993 2000 	ldrsb.w	r2, [r3]
 8000a7a:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <valEqualsThreshold+0xe0>)
 8000a7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	bf0c      	ite	eq
 8000a84:	2301      	moveq	r3, #1
 8000a86:	2300      	movne	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	e03f      	b.n	8000b0c <valEqualsThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_16BIT:
      return ((*(_FAR_DATA_ int16_t *)g_pTriggerConf->address) == g_threshold_s16) ? 1 : 0;
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <valEqualsThreshold+0xdc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <valEqualsThreshold+0xe4>)
 8000a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	bf0c      	ite	eq
 8000aa0:	2301      	moveq	r3, #1
 8000aa2:	2300      	movne	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	e031      	b.n	8000b0c <valEqualsThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_32BIT:
      return ((*(_FAR_DATA_ int32_t *)g_pTriggerConf->address) == g_threshold_s32) ? 1 : 0;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <valEqualsThreshold+0xdc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <valEqualsThreshold+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	bf0c      	ite	eq
 8000ab8:	2301      	moveq	r3, #1
 8000aba:	2300      	movne	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	e025      	b.n	8000b0c <valEqualsThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U8:
      return ((*(_FAR_DATA_ uint8_t *)g_pTriggerConf->address) == g_threshold_u8) ? 1 : 0;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <valEqualsThreshold+0xdc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <valEqualsThreshold+0xec>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	e019      	b.n	8000b0c <valEqualsThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U16:
      return ((*(_FAR_DATA_ uint16_t *)g_pTriggerConf->address) == g_threshold_u16) ? 1 : 0;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <valEqualsThreshold+0xdc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	881a      	ldrh	r2, [r3, #0]
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <valEqualsThreshold+0xf0>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	e00d      	b.n	8000b0c <valEqualsThreshold+0xcc>
    case SNP_TRC_DATA_ACCESS_TRIG_U32:
      return ((*(_FAR_DATA_ uint32_t *)g_pTriggerConf->address) == g_threshold_u32) ? 1 : 0;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <valEqualsThreshold+0xdc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <valEqualsThreshold+0xf4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	e001      	b.n	8000b0c <valEqualsThreshold+0xcc>
#ifdef USING_TRIGGER_ON_DOUBLE
    case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
      return ((*(_FAR_DATA_ double *)g_pTriggerConf->address) == g_threshold_double) ? 1 : 0;
#endif /* USING_TRIGGER_ON_DOUBLE */
    default:
      break;
 8000b08:	bf00      	nop
  }
  return 0;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200000f8 	.word	0x200000f8
 8000b1c:	200000ec 	.word	0x200000ec
 8000b20:	20000101 	.word	0x20000101
 8000b24:	20000104 	.word	0x20000104
 8000b28:	2000010c 	.word	0x2000010c
 8000b2c:	20000100 	.word	0x20000100
 8000b30:	20000102 	.word	0x20000102
 8000b34:	20000108 	.word	0x20000108

08000b38 <evaluateEnd>:
  * @brief  Function To call while in TRIGGED state. Check against end conditions.
  * @param  None
  * @retval Returns TRIG_EVAL_POST_REC if still in TRIGGED state; TRIG_EVAL_NO_REC if STOPPED.
  */
int32_t evaluateEnd(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* Check if stop asked */
  if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP)
 8000b3c:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <evaluateEnd+0xe8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	691b      	ldr	r3, [r3, #16]
  {
    g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
    g_internalTrigState = INTERNAL_STATE_STOPPED;
    return TRIG_EVAL_NO_REC;
  }
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_MASK) == 0)
 8000b42:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <evaluateEnd+0xe8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d101      	bne.n	8000b54 <evaluateEnd+0x1c>
  {
    /* Never stop */
    return TRIG_EVAL_POST_REC;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e05f      	b.n	8000c14 <evaluateEnd+0xdc>
  }
  /* Check against other stop conditions */
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_OVF) && (g_overflow != 1))
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <evaluateEnd+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d005      	beq.n	8000b6e <evaluateEnd+0x36>
 8000b62:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <evaluateEnd+0xec>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d001      	beq.n	8000b6e <evaluateEnd+0x36>
  {
    return TRIG_EVAL_POST_REC;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e052      	b.n	8000c14 <evaluateEnd+0xdc>
  }
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC) && (g_nbRecords < g_stopAfterRecords))
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <evaluateEnd+0xe8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d007      	beq.n	8000b8c <evaluateEnd+0x54>
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <evaluateEnd+0xf0>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <evaluateEnd+0xf4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	da01      	bge.n	8000b8c <evaluateEnd+0x54>
  {
    return TRIG_EVAL_POST_REC;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e043      	b.n	8000c14 <evaluateEnd+0xdc>
  }
  /* If here, a stop condition was faced. Check if autorestart */
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_AUTO_RESTART) && (g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG))
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <evaluateEnd+0xe8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d02c      	beq.n	8000bf4 <evaluateEnd+0xbc>
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <evaluateEnd+0xf8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d028      	beq.n	8000bf4 <evaluateEnd+0xbc>
  {
    /* The auto-restart is not possible in pretrig mode, as the field g_pTriggerConf->state
       is used for host synchronization; one must wait for host ACK before restarting
       the pre-triggering.
       Init state variables */
    if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC)
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <evaluateEnd+0xe8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d012      	beq.n	8000bd6 <evaluateEnd+0x9e>
    {
      if (g_binternalIgnoreTrig)
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <evaluateEnd+0xfc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <evaluateEnd+0x88>
      {
        g_internalTrigState = WAITING_BUFFER_EMPTY;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <evaluateEnd+0x100>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e002      	b.n	8000bc6 <evaluateEnd+0x8e>
      }
      else
      {
        /* Immediately rearm the trigger in this case */
        g_internalTrigState = WAITING_LEVEL_BEFORE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <evaluateEnd+0x100>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
      }
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <evaluateEnd+0xe8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	619a      	str	r2, [r3, #24]
      g_nbRecords = 0;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <evaluateEnd+0xf0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
    if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC)
 8000bd4:	e01d      	b.n	8000c12 <evaluateEnd+0xda>
    }
    else
    {
      /* In case of OVF stop, one should stop the acquisition and wait for
         the end of OVF before rearming */
      g_pTriggerConf->cmd = 0;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <evaluateEnd+0xe8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <evaluateEnd+0xe8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
      g_internalTrigState = INTERNAL_STATE_STOPPED;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <evaluateEnd+0x100>)
 8000be8:	2203      	movs	r2, #3
 8000bea:	601a      	str	r2, [r3, #0]
      bAutoRearmAfterOVF = 1;
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <evaluateEnd+0x104>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
    if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC)
 8000bf2:	e00e      	b.n	8000c12 <evaluateEnd+0xda>
  else
  {
    /* In that case a user action is required to start again => clear the previous command,
       but without clearing SNP_TRC_TRIGGER_TRIGGED (if set), because required for
       for host synchro in preTrig mode; the state will be update after ACK from host (HostReadEvent) */
    g_pTriggerConf->cmd = 0;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <evaluateEnd+0xe8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
    g_pTriggerConf->state = g_pTriggerConf->state & ((TraceHeaderField_t)0xFFFFFFFE);/*Clear SNP_TRC_TRIGGER_STARTED */
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <evaluateEnd+0xe8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	699a      	ldr	r2, [r3, #24]
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <evaluateEnd+0xe8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0201 	bic.w	r2, r2, #1
 8000c0a:	619a      	str	r2, [r3, #24]
    g_internalTrigState = INTERNAL_STATE_STOPPED;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <evaluateEnd+0x100>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	601a      	str	r2, [r3, #0]
    /* g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;  Moved into HostReadEvent */
  }
  return TRIG_EVAL_NO_REC;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200000ec 	.word	0x200000ec
 8000c24:	20000118 	.word	0x20000118
 8000c28:	20000114 	.word	0x20000114
 8000c2c:	20000110 	.word	0x20000110
 8000c30:	200000f4 	.word	0x200000f4
 8000c34:	200000fc 	.word	0x200000fc
 8000c38:	200000f0 	.word	0x200000f0
 8000c3c:	2000011c 	.word	0x2000011c

08000c40 <HostReadEvent>:
  * @brief  Inform the trigger module that the host has read some data
  * @param  None
  * @retval None
  */
void HostReadEvent(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  if ((g_internalTrigState == INTERNAL_STATE_STOPPED) && (g_pTriggerConf->state == SNP_TRC_TRIGGER_TRIGGED)
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HostReadEvent+0x34>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d10d      	bne.n	8000c68 <HostReadEvent+0x28>
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HostReadEvent+0x38>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d108      	bne.n	8000c68 <HostReadEvent+0x28>
      && (g_pTriggerConf->cmd == 0))
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HostReadEvent+0x38>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d103      	bne.n	8000c68 <HostReadEvent+0x28>
  {
    /* Update the trigger state now that we are sure that the host has seen the TRIGGED state */
    g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HostReadEvent+0x38>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  }
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000f0 	.word	0x200000f0
 8000c78:	200000ec 	.word	0x200000ec

08000c7c <readVar8bits>:
/**
 * @brief  Memory read function for 8 bits variables
 * @param  addr : variable address
 * @retval Data in buffer
 */
TraceBufferField_t readVar8bits(uint32_t addr) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    return (TraceBufferField_t) * (_FAR_DATA_ uint8_t*)addr;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <readVar16bits>:
/**
 * @brief  Memory read function for 16 bits variables
 * @param  addr : variable address
 * @retval Data in buffer
 */
TraceBufferField_t readVar16bits(uint32_t addr) {
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    /* Caution: if TraceBufferField_t is 8 bits, there is a truncature here */
    return (TraceBufferField_t) * (_FAR_DATA_ int16_t*)addr;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <readVar32bits>:
/**
 * @brief  Memory read functions for 32 bits variables
 * @param  addr : variable address
 * @retval Data in buffer
 */
TraceBufferField_t readVar32bits(uint32_t addr) {
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
    /* Caution: if TraceBufferField_t is 8 or 16 bits, there is a truncature here */
    return (TraceBufferField_t) * (_FAR_DATA_ uint32_t*)addr;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <IsBufferEmpty>:
            Think about it before using somewhere else.
  * @param  None
  * @retval None
  */

int32_t IsBufferEmpty(void) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
    int32_t nextReadAddr;
    if (g_lastReadPointer + 2 * g_recordSize - 1 > g_traceHeader.bufferEndAddr) {
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <IsBufferEmpty+0x4c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	005a      	lsls	r2, r3, #1
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <IsBufferEmpty+0x50>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4413      	add	r3, r2
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <IsBufferEmpty+0x54>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d903      	bls.n	8000cec <IsBufferEmpty+0x24>
        /* There is a place for only 1 record after g_lastReadPointer; the next
         one makes the buffer loopback */
        nextReadAddr = g_traceHeader.bufferStartAddr;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <IsBufferEmpty+0x54>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e005      	b.n	8000cf8 <IsBufferEmpty+0x30>
    } else {
        nextReadAddr = g_lastReadPointer + g_recordSize;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <IsBufferEmpty+0x50>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <IsBufferEmpty+0x4c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	607b      	str	r3, [r7, #4]
    }
    if (nextReadAddr == g_traceHeader.writePointer) {
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <IsBufferEmpty+0x54>)
 8000cfa:	69da      	ldr	r2, [r3, #28]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d101      	bne.n	8000d06 <IsBufferEmpty+0x3e>
        /* This means the buffer is empty */
        return 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <IsBufferEmpty+0x40>
    }
    return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	200009b8 	.word	0x200009b8
 8000d18:	200009bc 	.word	0x200009bc
 8000d1c:	20000000 	.word	0x20000000

08000d20 <DumpTrace>:
  * @param  None
  * @retval None
  */

/* */
void DumpTrace(void) {
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b08d      	sub	sp, #52	; 0x34
 8000d24:	af00      	add	r7, sp, #0
#endif /* USING_TRIGGER */
    static TraceBufferField_t g_subSamplingCount = 0;
    uint32_t varIdx;
    DataTraceAccessType_t varAccessType;
    TraceHeaderField_t readPointer, readPointerCopy;
    TraceHeaderField_t recordLastAddr = (TraceHeaderField_t)(-1); /* Init value used as signal of new record */
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	623b      	str	r3, [r7, #32]
#ifdef MEASURE_PERFORMANCE
    SetTraceGpio();
#endif /* MEASURE_PERFORMANCE */

    /* Get the trace header critical section contents once and for all */
    nbVar = g_traceHeader.nbVar & 0x0000FFFF;
 8000d2c:	4b7f      	ldr	r3, [pc, #508]	; (8000f2c <DumpTrace+0x20c>)
 8000d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d30:	81fb      	strh	r3, [r7, #14]
    nbDoubleVar = (g_traceHeader.nbVar & 0xFFFF0000) >> 16;
 8000d32:	4b7e      	ldr	r3, [pc, #504]	; (8000f2c <DumpTrace+0x20c>)
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	81bb      	strh	r3, [r7, #12]
    flags = g_traceHeader.flags;
 8000d3a:	4b7c      	ldr	r3, [pc, #496]	; (8000f2c <DumpTrace+0x20c>)
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	61fb      	str	r3, [r7, #28]
    writePointer = g_traceHeader.writePointer;
 8000d40:	4b7a      	ldr	r3, [pc, #488]	; (8000f2c <DumpTrace+0x20c>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	61bb      	str	r3, [r7, #24]

    if (nbVar == 0) {
 8000d46:	89fb      	ldrh	r3, [r7, #14]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10d      	bne.n	8000d68 <DumpTrace+0x48>
        /* Nothing to trace */
        if (bStarted == 1) {
 8000d4c:	4b78      	ldr	r3, [pc, #480]	; (8000f30 <DumpTrace+0x210>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	f040 8212 	bne.w	800117a <DumpTrace+0x45a>
            /* Acquisition stop: acknowledge to the host for synchronization */
            bStarted = 0;
 8000d56:	4b76      	ldr	r3, [pc, #472]	; (8000f30 <DumpTrace+0x210>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
            flags = SNP_TRC_START_STOP_ACK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61fb      	str	r3, [r7, #28]
            g_traceHeader.flags = flags;
 8000d60:	4a72      	ldr	r2, [pc, #456]	; (8000f2c <DumpTrace+0x20c>)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d66:	e208      	b.n	800117a <DumpTrace+0x45a>
        }
    } else {
        /* There is something to be traced
        The very critical field for read from the embedded is "readPointer"; to
        ensure the value read is not a transistory value, a copy is done. */
        readPointer = g_traceHeader.readPointer;
 8000d68:	4b70      	ldr	r3, [pc, #448]	; (8000f2c <DumpTrace+0x20c>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
        readPointerCopy = g_traceHeader.readPointerCopy;
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <DumpTrace+0x20c>)
 8000d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d72:	60bb      	str	r3, [r7, #8]
        if (readPointer != readPointerCopy) {
 8000d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d003      	beq.n	8000d84 <DumpTrace+0x64>
            /* The read pointer is being moved by the host; use the latest stable value
            instead; otherwise we may use an unpredictable value. A waiting loop may
            impact too much the user application. The worst case will lead to
            overflow (no deadlock). */
            readPointer = g_lastReadPointer;
 8000d7c:	4b6d      	ldr	r3, [pc, #436]	; (8000f34 <DumpTrace+0x214>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	e00d      	b.n	8000da0 <DumpTrace+0x80>
        } else {
            /* This becomes the most recently known stable value */
#ifdef USING_TRIGGER
            if ((g_lastReadPointer != readPointer) && (bStarted == 1)) {
 8000d84:	4b6b      	ldr	r3, [pc, #428]	; (8000f34 <DumpTrace+0x214>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d005      	beq.n	8000d9a <DumpTrace+0x7a>
 8000d8e:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <DumpTrace+0x210>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <DumpTrace+0x7a>
                /* Inform the trigger module that the host has read some data */
                HostReadEvent();
 8000d96:	f7ff ff53 	bl	8000c40 <HostReadEvent>
            }
#endif /* USING_TRIGGER */
            g_lastReadPointer = readPointer;
 8000d9a:	4a66      	ldr	r2, [pc, #408]	; (8000f34 <DumpTrace+0x214>)
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	6013      	str	r3, [r2, #0]
        }

        if (bStarted == 0) {
 8000da0:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <DumpTrace+0x210>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d155      	bne.n	8000e54 <DumpTrace+0x134>
            /* This is the very first acquisition: let s compute the record size and
            check that the correct value for the readPointer has been set by the host
            (mandatory for correct management of overflow) */
            g_recordSize = (1 + nbVar + nbDoubleVar) * sizeof(TraceBufferField_t); /* SNP_TRC_BUFFER_FORMAT==1 contains a
 8000da8:	89fb      	ldrh	r3, [r7, #14]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	89bb      	ldrh	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4a61      	ldr	r2, [pc, #388]	; (8000f38 <DumpTrace+0x218>)
 8000db4:	6013      	str	r3, [r2, #0]
                                                                                     timestamp => 1+nbVar */
            /* Each double takes 2 places */
            nbRecords = SNP_TRC_BUFFER_SIZE * sizeof(TraceBufferField_t) / g_recordSize;
 8000db6:	4b60      	ldr	r3, [pc, #384]	; (8000f38 <DumpTrace+0x218>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f640 0298 	movw	r2, #2200	; 0x898
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4a5e      	ldr	r2, [pc, #376]	; (8000f3c <DumpTrace+0x21c>)
 8000dc4:	6013      	str	r3, [r2, #0]
            writePointer = (TraceHeaderField_t)&g_dataTraceBuffer;
 8000dc6:	4b5e      	ldr	r3, [pc, #376]	; (8000f40 <DumpTrace+0x220>)
 8000dc8:	61bb      	str	r3, [r7, #24]
            pWrite = (TraceHeaderField_t*)writePointer;
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4a5d      	ldr	r2, [pc, #372]	; (8000f44 <DumpTrace+0x224>)
 8000dce:	6013      	str	r3, [r2, #0]
            expectedInitialReadPointer = writePointer + (nbRecords - 1) * g_recordSize;
 8000dd0:	4b5a      	ldr	r3, [pc, #360]	; (8000f3c <DumpTrace+0x21c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <DumpTrace+0x218>)
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	fb02 f303 	mul.w	r3, r2, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4413      	add	r3, r2
 8000de2:	607b      	str	r3, [r7, #4]
            if (expectedInitialReadPointer == readPointer) {
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d12b      	bne.n	8000e44 <DumpTrace+0x124>
                /* All is OK for tracing: let s start */
#ifdef STM32F0XX
                /* On Cortex M0, the LDRx instructions require to be aligned: do it now for robustness (no hard fault) */
                alignAddresses(nbVar);
#endif /* STM32F0XX */
                bStarted = 1;
 8000dec:	4b50      	ldr	r3, [pc, #320]	; (8000f30 <DumpTrace+0x210>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
                /* Reset static variables */
                bOverflow = 0;
 8000df2:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <DumpTrace+0x228>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
                g_timestamp = 0;
 8000df8:	4b54      	ldr	r3, [pc, #336]	; (8000f4c <DumpTrace+0x22c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
                g_timestampOverflow = 0;
 8000dfe:	4b54      	ldr	r3, [pc, #336]	; (8000f50 <DumpTrace+0x230>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
                g_subSamplingCount = 0;
 8000e04:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <DumpTrace+0x234>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
#ifdef USING_TRIGGER
                bPreTrigBufOvf = 0;
 8000e0a:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <DumpTrace+0x238>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
                bHasTrigged = 0;
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <DumpTrace+0x23c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
                /* Inform the trigger module */
                SetTriggerOverflow(0);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fb76 	bl	8000508 <SetTriggerOverflow>
#endif /* USING_TRIGGER */
                /* Reset write pointer in header critical section */
                g_traceHeader.writePointer = writePointer;
 8000e1c:	4a43      	ldr	r2, [pc, #268]	; (8000f2c <DumpTrace+0x20c>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	61d3      	str	r3, [r2, #28]
                g_traceHeader.writePointerCopy = writePointer;
 8000e22:	4a42      	ldr	r2, [pc, #264]	; (8000f2c <DumpTrace+0x20c>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6213      	str	r3, [r2, #32]
                /* Initialize the most recently stable value for read pointer */
                g_lastReadPointer = expectedInitialReadPointer;
 8000e28:	4a42      	ldr	r2, [pc, #264]	; (8000f34 <DumpTrace+0x214>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
#ifdef USING_TRIGGER
                AcqConfigureTrigger(&(g_traceHeader.trigger));
 8000e2e:	484c      	ldr	r0, [pc, #304]	; (8000f60 <DumpTrace+0x240>)
 8000e30:	f7ff fba2 	bl	8000578 <AcqConfigureTrigger>
#endif /* USING_TRIGGER */
                /* Acknowledge to the host for synchronization */
                flags |= SNP_TRC_START_STOP_ACK;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	61fb      	str	r3, [r7, #28]
                g_traceHeader.flags = flags;
 8000e3c:	4a3b      	ldr	r2, [pc, #236]	; (8000f2c <DumpTrace+0x20c>)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e42:	e007      	b.n	8000e54 <DumpTrace+0x134>
            } else {
                /* Something wrong with the host: flag it */
                flags |= SNP_TRC_RECORD_SKIPPED;
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	61fb      	str	r3, [r7, #28]
                g_traceHeader.flags = flags;
 8000e4c:	4a37      	ldr	r2, [pc, #220]	; (8000f2c <DumpTrace+0x20c>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	62d3      	str	r3, [r2, #44]	; 0x2c
#ifdef MEASURE_PERFORMANCE
                ResetTraceGpio();
#endif /* MEASURE_PERFORMANCE */
                return;
 8000e52:	e192      	b.n	800117a <DumpTrace+0x45a>
            }
        }

        if (bOverflow == 1) {
 8000e54:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <DumpTrace+0x228>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d109      	bne.n	8000e70 <DumpTrace+0x150>
            /* We were in overflow mode; check if the readPointer moved */
            if (writePointer != readPointer) {
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d005      	beq.n	8000e70 <DumpTrace+0x150>
                /* Yes */
                bOverflow = 0;
 8000e64:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <DumpTrace+0x228>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
#ifdef USING_TRIGGER
                /* Inform the trigger module */
                SetTriggerOverflow(0);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fb4c 	bl	8000508 <SetTriggerOverflow>
#endif /* USING_TRIGGER */
            }
        }

#ifdef USING_TRIGGER
        trigEval = AcqEvaluateTrigger();
 8000e70:	f7ff fc40 	bl	80006f4 <AcqEvaluateTrigger>
 8000e74:	4603      	mov	r3, r0
 8000e76:	603b      	str	r3, [r7, #0]
        if ((trigEval != TRIG_EVAL_NO_REC) && (trigEval != TRIG_EVAL_PRE1_REC)) {
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 815c 	beq.w	8001138 <DumpTrace+0x418>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	f000 8158 	beq.w	8001138 <DumpTrace+0x418>
            /* There is something to do with triggers */
#endif /* USING_TRIGGER */
            g_subSamplingCount++;
 8000e88:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <DumpTrace+0x234>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <DumpTrace+0x234>)
 8000e90:	6013      	str	r3, [r2, #0]
#ifdef USING_TRIGGER
            if ((trigEval == TRIG_EVAL_EVENT) || ((trigEval == TRIG_EVAL_POST_REC) && (bHasTrigged == 0))) {
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d006      	beq.n	8000ea6 <DumpTrace+0x186>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d107      	bne.n	8000eae <DumpTrace+0x18e>
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <DumpTrace+0x23c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d103      	bne.n	8000eae <DumpTrace+0x18e>
                /* Ensure the trigger event is traced, for easier management */
                g_subSamplingCount = g_traceHeader.subSamplingRate;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <DumpTrace+0x20c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <DumpTrace+0x234>)
 8000eac:	6013      	str	r3, [r2, #0]
            }
            bHasTrigged = 1;
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <DumpTrace+0x23c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
#endif /* USING_TRIGGER */
            /* Do not systematically trace at each call; allow sub-sampling (added from version 3) */
            if (g_subSamplingCount >= g_traceHeader.subSamplingRate) {
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <DumpTrace+0x20c>)
 8000eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <DumpTrace+0x234>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f200 80a1 	bhi.w	8001004 <DumpTrace+0x2e4>
                /* Reset the counter for next time */
                g_subSamplingCount = 0;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <DumpTrace+0x234>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

                if (bOverflow == 0) {
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <DumpTrace+0x228>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f040 8099 	bne.w	8001004 <DumpTrace+0x2e4>
                    if (writePointer == readPointer) {
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d10d      	bne.n	8000ef6 <DumpTrace+0x1d6>
                        /* We are about to write the last available area into the buffer. For easiest
                        overflow management, consider this as the overflow signal (do not write
                        to it, do not increment writePointer) */
                        bOverflow = 1; /* For internal processing of the overflow */
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <DumpTrace+0x228>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
                        flags |= SNP_TRC_FLAG_OVERFLOW;
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
                        /* Immediately modify the header critical section in this case (nothing else to do) */
                        g_traceHeader.flags = flags;
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <DumpTrace+0x20c>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	62d3      	str	r3, [r2, #44]	; 0x2c
#ifdef USING_TRIGGER
                        /* Inform the trigger module */
                        SetTriggerOverflow(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff fb0a 	bl	8000508 <SetTriggerOverflow>
 8000ef4:	e086      	b.n	8001004 <DumpTrace+0x2e4>
#endif /* USING_TRIGGER */
                    } else {
                        /* Let s add a new record */
#ifdef USING_TRIGGER
                        /* Inform the trigger module of new records (real ones, not pretrig ones) */
                        if (trigEval != TRIG_EVAL_PRE2_REC) {
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d001      	beq.n	8000f00 <DumpTrace+0x1e0>
                            AddingNewRecord();
 8000efc:	f7ff fb2e 	bl	800055c <AddingNewRecord>
                        }
#endif /* USING_TRIGGER */
                        recordLastAddr = (TraceHeaderField_t)pWrite + g_recordSize - 1;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <DumpTrace+0x224>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <DumpTrace+0x218>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]

                        /* Begin with timestamp */
                        *pWrite = g_timestamp;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <DumpTrace+0x224>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <DumpTrace+0x22c>)
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	601a      	str	r2, [r3, #0]
                        pWrite++;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <DumpTrace+0x224>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <DumpTrace+0x224>)
 8000f22:	6013      	str	r3, [r2, #0]
                        varIdx = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
                        /* Continue with variables values */
                        while ((TraceHeaderField_t)pWrite <= recordLastAddr) {
 8000f28:	e052      	b.n	8000fd0 <DumpTrace+0x2b0>
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	200009c8 	.word	0x200009c8
 8000f34:	200009bc 	.word	0x200009bc
 8000f38:	200009b8 	.word	0x200009b8
 8000f3c:	200009cc 	.word	0x200009cc
 8000f40:	20000120 	.word	0x20000120
 8000f44:	200009d0 	.word	0x200009d0
 8000f48:	200009d4 	.word	0x200009d4
 8000f4c:	200009c0 	.word	0x200009c0
 8000f50:	200009c4 	.word	0x200009c4
 8000f54:	200009d8 	.word	0x200009d8
 8000f58:	200009dc 	.word	0x200009dc
 8000f5c:	200009dd 	.word	0x200009dd
 8000f60:	20000088 	.word	0x20000088
                            uint32_t tmpAddr = g_traceHeader.g_varList[varIdx].address;
 8000f64:	4a86      	ldr	r2, [pc, #536]	; (8001180 <DumpTrace+0x460>)
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	3307      	adds	r3, #7
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	617b      	str	r3, [r7, #20]
                            varAccessType = g_traceHeader.g_varList[varIdx].accessType;
 8000f72:	4a83      	ldr	r2, [pc, #524]	; (8001180 <DumpTrace+0x460>)
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	3307      	adds	r3, #7
 8000f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
                            if (varAccessType == SNP_TRC_DATA_ACCESS_64BIT) {
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d113      	bne.n	8000fac <DumpTrace+0x28c>
                                /* Special case for doubles: do it in 2x32bits */
                                varAccessType = SNP_TRC_DATA_ACCESS_32BIT;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
                                *pWrite = g_readFunc[varAccessType](tmpAddr);
 8000f88:	4a7e      	ldr	r2, [pc, #504]	; (8001184 <DumpTrace+0x464>)
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	4a7d      	ldr	r2, [pc, #500]	; (8001188 <DumpTrace+0x468>)
 8000f92:	6814      	ldr	r4, [r2, #0]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	4798      	blx	r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	6023      	str	r3, [r4, #0]
                                pWrite++;
 8000f9c:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <DumpTrace+0x468>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	4a79      	ldr	r2, [pc, #484]	; (8001188 <DumpTrace+0x468>)
 8000fa4:	6013      	str	r3, [r2, #0]
                                tmpAddr += sizeof(TraceHeaderField_t);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
                            }
                            *pWrite = g_readFunc[varAccessType](tmpAddr);
 8000fac:	4a75      	ldr	r2, [pc, #468]	; (8001184 <DumpTrace+0x464>)
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	4a74      	ldr	r2, [pc, #464]	; (8001188 <DumpTrace+0x468>)
 8000fb6:	6814      	ldr	r4, [r2, #0]
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	4798      	blx	r3
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	6023      	str	r3, [r4, #0]
                            varIdx++;
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
                            pWrite++;
 8000fc6:	4b70      	ldr	r3, [pc, #448]	; (8001188 <DumpTrace+0x468>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <DumpTrace+0x468>)
 8000fce:	6013      	str	r3, [r2, #0]
                        while ((TraceHeaderField_t)pWrite <= recordLastAddr) {
 8000fd0:	4b6d      	ldr	r3, [pc, #436]	; (8001188 <DumpTrace+0x468>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d2c3      	bcs.n	8000f64 <DumpTrace+0x244>
                        }
                        /* At the end, increment the pointer shared with the host */
                        recordLastAddr++;
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	623b      	str	r3, [r7, #32]
                        /* Manage trace buffer loopback */
                        if (recordLastAddr + g_recordSize - 1 > g_traceHeader.bufferEndAddr) {
 8000fe2:	4b6a      	ldr	r3, [pc, #424]	; (800118c <DumpTrace+0x46c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	4413      	add	r3, r2
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	4b64      	ldr	r3, [pc, #400]	; (8001180 <DumpTrace+0x460>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d907      	bls.n	8001004 <DumpTrace+0x2e4>
                            /* There is not enough space in the buffer for a new record: restart from
                            the beginning */
                            recordLastAddr = g_traceHeader.bufferStartAddr;
 8000ff4:	4b62      	ldr	r3, [pc, #392]	; (8001180 <DumpTrace+0x460>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	623b      	str	r3, [r7, #32]
                            pWrite = (TraceHeaderField_t*)g_traceHeader.bufferStartAddr;
 8000ffa:	4b61      	ldr	r3, [pc, #388]	; (8001180 <DumpTrace+0x460>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b61      	ldr	r3, [pc, #388]	; (8001188 <DumpTrace+0x468>)
 8001002:	601a      	str	r2, [r3, #0]
#endif /* USING_TRIGGER */
                    }
                }
            } /* Note that g_timestamp increments even when record is skipped by subsampling (may change in the future ?) */
#ifdef USING_TRIGGER
            if (trigEval == TRIG_EVAL_EVENT) {
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d173      	bne.n	80010f2 <DumpTrace+0x3d2>
                /* We just hit the trigger after PRETRIG state: let s compute the index */
                /* of the first record to commit to the host */
                int32_t nbPreTrigRecords;
                if (bPreTrigBufOvf == 1) {
 800100a:	4b61      	ldr	r3, [pc, #388]	; (8001190 <DumpTrace+0x470>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d107      	bne.n	8001022 <DumpTrace+0x302>
                    /* The buffer is full with PRETRIG records */
                    nbPreTrigRecords = nbRecords - 1; /* -1 for trig event */
 8001012:	4b60      	ldr	r3, [pc, #384]	; (8001194 <DumpTrace+0x474>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
                    /* Clear the flag for next time */
                    bPreTrigBufOvf = 0;
 800101a:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <DumpTrace+0x470>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	e020      	b.n	8001064 <DumpTrace+0x344>
                } else {
                    /* Pretrig records are between g_traceHeader.writePointer (last record
                    committed to the host) and pWrite (last record stored in buffer).
                    One must also deduce the trig event record => -1 */
                    if ((TraceBufferField_t)pWrite > g_traceHeader.writePointer) {
 8001022:	4b57      	ldr	r3, [pc, #348]	; (8001180 <DumpTrace+0x460>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a58      	ldr	r2, [pc, #352]	; (8001188 <DumpTrace+0x468>)
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	4293      	cmp	r3, r2
 800102c:	d20c      	bcs.n	8001048 <DumpTrace+0x328>
                        nbPreTrigRecords = ((TraceBufferField_t)pWrite - g_traceHeader.writePointer) / g_recordSize - 1;
 800102e:	4b56      	ldr	r3, [pc, #344]	; (8001188 <DumpTrace+0x468>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b52      	ldr	r3, [pc, #328]	; (8001180 <DumpTrace+0x460>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	1ad2      	subs	r2, r2, r3
 800103a:	4b54      	ldr	r3, [pc, #336]	; (800118c <DumpTrace+0x46c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	e00d      	b.n	8001064 <DumpTrace+0x344>
                    } else {
                        nbPreTrigRecords = nbRecords - (g_traceHeader.writePointer - (TraceBufferField_t)pWrite) / g_recordSize - 1;
 8001048:	4b52      	ldr	r3, [pc, #328]	; (8001194 <DumpTrace+0x474>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <DumpTrace+0x460>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	494d      	ldr	r1, [pc, #308]	; (8001188 <DumpTrace+0x468>)
 8001052:	6809      	ldr	r1, [r1, #0]
 8001054:	1a59      	subs	r1, r3, r1
 8001056:	4b4d      	ldr	r3, [pc, #308]	; (800118c <DumpTrace+0x46c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	fbb1 f3f3 	udiv	r3, r1, r3
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
                    }
                }
                /* Makes the host read pointer points to the first valid pretrig record */
                if (nbPreTrigRecords > g_traceHeader.trigger.nPreTrig) {
 8001064:	4b46      	ldr	r3, [pc, #280]	; (8001180 <DumpTrace+0x460>)
 8001066:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d203      	bcs.n	8001078 <DumpTrace+0x358>
                    /* We recorded more than expected; truncate. */
                    nbPreTrigRecords = g_traceHeader.trigger.nPreTrig;
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <DumpTrace+0x460>)
 8001072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001076:	613b      	str	r3, [r7, #16]
                }
                /* readPointer is the first address of the last record already read by the host. The next record to be
                read is at address readPointer+g_recordSize. Moreover, we must also add the trig event record => +2 */
                if ((TraceBufferField_t)pWrite >= (TraceHeaderField_t)&g_dataTraceBuffer + (nbPreTrigRecords + 2) * g_recordSize) {
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	3302      	adds	r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	4b43      	ldr	r3, [pc, #268]	; (800118c <DumpTrace+0x46c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	fb02 f303 	mul.w	r3, r2, r3
 8001086:	4a44      	ldr	r2, [pc, #272]	; (8001198 <DumpTrace+0x478>)
 8001088:	4413      	add	r3, r2
 800108a:	4a3f      	ldr	r2, [pc, #252]	; (8001188 <DumpTrace+0x468>)
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	4293      	cmp	r3, r2
 8001090:	d80d      	bhi.n	80010ae <DumpTrace+0x38e>
                    g_traceHeader.readPointer = (TraceBufferField_t)pWrite - (nbPreTrigRecords + 2) * g_recordSize;
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <DumpTrace+0x468>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	3302      	adds	r3, #2
 800109c:	4619      	mov	r1, r3
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <DumpTrace+0x46c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	fb01 f303 	mul.w	r3, r1, r3
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	4a35      	ldr	r2, [pc, #212]	; (8001180 <DumpTrace+0x460>)
 80010aa:	6253      	str	r3, [r2, #36]	; 0x24
 80010ac:	e01d      	b.n	80010ea <DumpTrace+0x3ca>
                } else {
                    /* Buffer loopback: read pointer must be after pWrite */
                    if (nbRecords > nbPreTrigRecords + 2) {
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3302      	adds	r3, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <DumpTrace+0x474>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d20e      	bcs.n	80010da <DumpTrace+0x3ba>
                        g_traceHeader.readPointer = (TraceBufferField_t)pWrite + (nbRecords - nbPreTrigRecords - 2) * g_recordSize;
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <DumpTrace+0x474>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4a31      	ldr	r2, [pc, #196]	; (800118c <DumpTrace+0x46c>)
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <DumpTrace+0x468>)
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <DumpTrace+0x460>)
 80010d6:	6253      	str	r3, [r2, #36]	; 0x24
 80010d8:	e007      	b.n	80010ea <DumpTrace+0x3ca>
                    } else {
                        /* The full buffer will have to be displayed: point immediately after pWrite for easier
                           overflow management */
                        g_traceHeader.readPointer = (TraceBufferField_t)pWrite + g_recordSize;
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <DumpTrace+0x468>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <DumpTrace+0x46c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a26      	ldr	r2, [pc, #152]	; (8001180 <DumpTrace+0x460>)
 80010e8:	6253      	str	r3, [r2, #36]	; 0x24
                    }
                }
                g_traceHeader.readPointerCopy = g_traceHeader.readPointer;
 80010ea:	4b25      	ldr	r3, [pc, #148]	; (8001180 <DumpTrace+0x460>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	4a24      	ldr	r2, [pc, #144]	; (8001180 <DumpTrace+0x460>)
 80010f0:	6293      	str	r3, [r2, #40]	; 0x28
            }
            if (trigEval == TRIG_EVAL_PRE2_REC) {
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d10d      	bne.n	8001114 <DumpTrace+0x3f4>
                /* In PRETRIG state, do not commit records to the host, but simply manage
                the (internal) overflow */
                if (((TraceBufferField_t)pWrite == g_traceHeader.writePointer) && (recordLastAddr != (TraceHeaderField_t)(-1))) {
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <DumpTrace+0x460>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	4a22      	ldr	r2, [pc, #136]	; (8001188 <DumpTrace+0x468>)
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	4293      	cmp	r3, r2
 8001102:	d12b      	bne.n	800115c <DumpTrace+0x43c>
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110a:	d027      	beq.n	800115c <DumpTrace+0x43c>
                    /* At least one record was added into the buffer (because recordLastAddr != -1) then pWrite looped back to
                       writePointer */
                    bPreTrigBufOvf = 1;
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <DumpTrace+0x470>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
            if (trigEval == TRIG_EVAL_PRE2_REC) {
 8001112:	e023      	b.n	800115c <DumpTrace+0x43c>
                }
            } else {
                if (recordLastAddr != (TraceHeaderField_t)(-1)) {
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111a:	d005      	beq.n	8001128 <DumpTrace+0x408>
                    /* A new record was added; increment write pointer now for host synchro */
                    g_traceHeader.writePointer = recordLastAddr;
 800111c:	4a18      	ldr	r2, [pc, #96]	; (8001180 <DumpTrace+0x460>)
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	61d3      	str	r3, [r2, #28]
                    /* Duplicate for the host to be ensured the value is stable */
                    g_traceHeader.writePointerCopy = recordLastAddr;
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <DumpTrace+0x460>)
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	6213      	str	r3, [r2, #32]
                }
                if (trigEval == TRIG_EVAL_EVENT) {
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d116      	bne.n	800115c <DumpTrace+0x43c>
                    /* Signal the TRIG event to the host in pre-trig mode
                    (because in this mode, using only read and write pointers to check against new records
                    may lead to deadlock condition in case nPreTrig+nbRecordsAfterTrig==nbRecords).
                    This MUST be done lastly for correct host synchronization */
                    g_traceHeader.trigger.state = SNP_TRC_TRIGGER_TRIGGED;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <DumpTrace+0x460>)
 8001130:	2202      	movs	r2, #2
 8001132:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            if (trigEval == TRIG_EVAL_PRE2_REC) {
 8001136:	e011      	b.n	800115c <DumpTrace+0x43c>
                }
            }
        } else {
            if ((trigEval == TRIG_EVAL_NO_REC) && (bHasTrigged != 0)) {
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10f      	bne.n	800115e <DumpTrace+0x43e>
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <DumpTrace+0x47c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00b      	beq.n	800115e <DumpTrace+0x43e>
                /* A trigger stop condition was hit. If the user expected it, the timestamp
                should restart from 0 the next time */
                if (g_traceHeader.trigger.mode & SNP_TRC_TRIGGER_RST_TIMESTAMP) {
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <DumpTrace+0x460>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <DumpTrace+0x43e>
                    g_timestamp = 0;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <DumpTrace+0x480>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e000      	b.n	800115e <DumpTrace+0x43e>
            if (trigEval == TRIG_EVAL_PRE2_REC) {
 800115c:	bf00      	nop
            }
        }
#endif /* USING_TRIGGER */

        /* Always increment the timestamp for timestamp synchro with the host according to SNP_TRC_TIMESTAMP_BASE_UNIT */
        g_timestamp++;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <DumpTrace+0x480>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <DumpTrace+0x480>)
 8001166:	6013      	str	r3, [r2, #0]
        if (g_timestamp == 0) {
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <DumpTrace+0x480>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d104      	bne.n	800117a <DumpTrace+0x45a>
            /* Flag the overflow */
            g_timestampOverflow++;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <DumpTrace+0x484>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <DumpTrace+0x484>)
 8001178:	6013      	str	r3, [r2, #0]
        }
    }
#ifdef MEASURE_PERFORMANCE
    ResetTraceGpio();
#endif /* MEASURE_PERFORMANCE */
}
 800117a:	3734      	adds	r7, #52	; 0x34
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	200000ac 	.word	0x200000ac
 8001188:	200009d0 	.word	0x200009d0
 800118c:	200009b8 	.word	0x200009b8
 8001190:	200009dc 	.word	0x200009dc
 8001194:	200009cc 	.word	0x200009cc
 8001198:	20000120 	.word	0x20000120
 800119c:	200009dd 	.word	0x200009dd
 80011a0:	200009c0 	.word	0x200009c0
 80011a4:	200009c4 	.word	0x200009c4

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f000 fc42 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 f824 	bl	80011fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/200);//80000000/200=>400000ticks,400000ticks at 80MHz = 5ms
 80011b4:	f001 fb58 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <main+0x48>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	099b      	lsrs	r3, r3, #6
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fd81 	bl	8001cca <HAL_SYSTICK_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f000 f956 	bl	8001478 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011cc:	f000 f880 	bl	80012d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011d0:	f000 f8fe 	bl	80013d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011d4:	2100      	movs	r1, #0
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <main+0x4c>)
 80011d8:	f001 fbfa 	bl	80029d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011dc:	2104      	movs	r1, #4
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <main+0x4c>)
 80011e0:	f001 fbf6 	bl	80029d0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011e4:	213c      	movs	r1, #60	; 0x3c
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <main+0x50>)
 80011e8:	f001 fd48 	bl	8002c7c <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <main+0x44>
 80011ee:	bf00      	nop
 80011f0:	51eb851f 	.word	0x51eb851f
 80011f4:	200009e0 	.word	0x200009e0
 80011f8:	20000a28 	.word	0x20000a28

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fa88 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <SystemClock_Config+0xcc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <SystemClock_Config+0xcc>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <SystemClock_Config+0xcc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <SystemClock_Config+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001248:	4a20      	ldr	r2, [pc, #128]	; (80012cc <SystemClock_Config+0xd0>)
 800124a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001270:	230f      	movs	r3, #15
 8001272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001274:	2360      	movs	r3, #96	; 0x60
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800127c:	2304      	movs	r3, #4
 800127e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fecb 	bl	8002020 <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001290:	f000 f952 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2102      	movs	r1, #2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 f92d 	bl	8002510 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012bc:	f000 f93c 	bl	8001538 <Error_Handler>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3750      	adds	r7, #80	; 0x50
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	615a      	str	r2, [r3, #20]
 80012fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <MX_TIM2_Init+0xfc>)
 800130a:	2204      	movs	r2, #4
 800130c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_TIM2_Init+0xfc>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4828      	ldr	r0, [pc, #160]	; (80013cc <MX_TIM2_Init+0xfc>)
 800132a:	f001 faa9 	bl	8002880 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001334:	f000 f900 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	4821      	ldr	r0, [pc, #132]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001346:	f001 fde9 	bl	8002f1c <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001350:	f000 f8f2 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001354:	481d      	ldr	r0, [pc, #116]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001356:	f001 fae2 	bl	800291e <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001360:	f000 f8ea 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4619      	mov	r1, r3
 8001372:	4816      	ldr	r0, [pc, #88]	; (80013cc <MX_TIM2_Init+0xfc>)
 8001374:	f002 f966 	bl	8003644 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800137e:	f000 f8db 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	; 0x60
 8001384:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_TIM2_Init+0xfc>)
 800139a:	f001 fcfd 	bl	8002d98 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013a4:	f000 f8c8 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2204      	movs	r2, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_TIM2_Init+0xfc>)
 80013b0:	f001 fcf2 	bl	8002d98 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013ba:	f000 f8bd 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <MX_TIM2_Init+0xfc>)
 80013c0:	f000 f950 	bl	8001664 <HAL_TIM_MspPostInit>

}
 80013c4:	bf00      	nop
 80013c6:	3738      	adds	r7, #56	; 0x38
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200009e0 	.word	0x200009e0

080013d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2224      	movs	r2, #36	; 0x24
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 f99e 	bl	8003720 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_TIM3_Init+0xa0>)
 80013ee:	4a21      	ldr	r2, [pc, #132]	; (8001474 <MX_TIM3_Init+0xa4>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_TIM3_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_TIM3_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_TIM3_Init+0xa0>)
 8001400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001404:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_TIM3_Init+0xa0>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_TIM3_Init+0xa0>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001412:	2303      	movs	r3, #3
 8001414:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800142a:	2301      	movs	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_TIM3_Init+0xa0>)
 800143e:	f001 fb77 	bl	8002b30 <HAL_TIM_Encoder_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001448:	f000 f876 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM3_Init+0xa0>)
 800145a:	f002 f8f3 	bl	8003644 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001464:	f000 f868 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3730      	adds	r7, #48	; 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000a28 	.word	0x20000a28
 8001474:	40000400 	.word	0x40000400

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_GPIO_Init+0xb8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a26      	ldr	r2, [pc, #152]	; (8001530 <MX_GPIO_Init+0xb8>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_GPIO_Init+0xb8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <MX_GPIO_Init+0xbc>)
 8001506:	f000 fd71 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_GPIO_Init+0xbc>)
 8001524:	f000 fbde 	bl	8001ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d10d      	bne.n	80015c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_TIM_Base_MspInit+0x3c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_TIM_Base_MspInit+0x3c>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_TIM_Base_MspInit+0x3c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_TIM_Encoder_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_TIM_Encoder_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_TIM_Encoder_MspInit+0x88>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_TIM_Encoder_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_TIM_Encoder_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_TIM_Encoder_MspInit+0x88>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_TIM_Encoder_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800162e:	23c0      	movs	r3, #192	; 0xc0
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800163e:	2302      	movs	r3, #2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_TIM_Encoder_MspInit+0x8c>)
 800164a:	f000 fb4b 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40000400 	.word	0x40000400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001684:	d11d      	bne.n	80016c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_TIM_MspPostInit+0x68>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_TIM_MspPostInit+0x68>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_TIM_MspPostInit+0x68>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016a2:	2303      	movs	r3, #3
 80016a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <HAL_TIM_MspPostInit+0x6c>)
 80016be:	f000 fb11 	bl	8001ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	pnew = TIM3->CNT;
 8001720:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <SysTick_Handler+0x238>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <SysTick_Handler+0x23c>)
 8001728:	801a      	strh	r2, [r3, #0]
	theta = 360*(float)((int)pnew / 28800.0f);	//degrees
 800172a:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <SysTick_Handler+0x23c>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001738:	eddf 6a88 	vldr	s13, [pc, #544]	; 800195c <SysTick_Handler+0x240>
 800173c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001740:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001960 <SysTick_Handler+0x244>
 8001744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001748:	4b86      	ldr	r3, [pc, #536]	; (8001964 <SysTick_Handler+0x248>)
 800174a:	edc3 7a00 	vstr	s15, [r3]
	vel = (int)(pnew - pold)*200.0f / 28800.0f;	//rev/s
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <SysTick_Handler+0x23c>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	461a      	mov	r2, r3
 8001756:	4b84      	ldr	r3, [pc, #528]	; (8001968 <SysTick_Handler+0x24c>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001766:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800196c <SysTick_Handler+0x250>
 800176a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800176e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800195c <SysTick_Handler+0x240>
 8001772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001776:	4b7e      	ldr	r3, [pc, #504]	; (8001970 <SysTick_Handler+0x254>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
	buffer[ii]=vel;
 800177c:	4b7d      	ldr	r3, [pc, #500]	; (8001974 <SysTick_Handler+0x258>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a7b      	ldr	r2, [pc, #492]	; (8001970 <SysTick_Handler+0x254>)
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	497c      	ldr	r1, [pc, #496]	; (8001978 <SysTick_Handler+0x25c>)
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	601a      	str	r2, [r3, #0]
	flag2=1;
 800178c:	4b7b      	ldr	r3, [pc, #492]	; (800197c <SysTick_Handler+0x260>)
 800178e:	2201      	movs	r2, #1
 8001790:	801a      	strh	r2, [r3, #0]
	if ((vel >= 50.0f) || (vel <= -50.0f)) {
 8001792:	4b77      	ldr	r3, [pc, #476]	; (8001970 <SysTick_Handler+0x254>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001980 <SysTick_Handler+0x264>
 800179c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	da09      	bge.n	80017ba <SysTick_Handler+0x9e>
 80017a6:	4b72      	ldr	r3, [pc, #456]	; (8001970 <SysTick_Handler+0x254>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001984 <SysTick_Handler+0x268>
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	d80e      	bhi.n	80017d8 <SysTick_Handler+0xbc>
		flag=1;
 80017ba:	4b73      	ldr	r3, [pc, #460]	; (8001988 <SysTick_Handler+0x26c>)
 80017bc:	2201      	movs	r2, #1
 80017be:	801a      	strh	r2, [r3, #0]
		buffer[ii]=velold;
 80017c0:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <SysTick_Handler+0x258>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a71      	ldr	r2, [pc, #452]	; (800198c <SysTick_Handler+0x270>)
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	496b      	ldr	r1, [pc, #428]	; (8001978 <SysTick_Handler+0x25c>)
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	601a      	str	r2, [r3, #0]
		vel = velold;
 80017d0:	4b6e      	ldr	r3, [pc, #440]	; (800198c <SysTick_Handler+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a66      	ldr	r2, [pc, #408]	; (8001970 <SysTick_Handler+0x254>)
 80017d6:	6013      	str	r3, [r2, #0]
//	}


	// Reference Creation

	if ( (ii >= 0) && (ii <= 99) ) {
 80017d8:	4b66      	ldr	r3, [pc, #408]	; (8001974 <SysTick_Handler+0x258>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b63      	cmp	r3, #99	; 0x63
 80017de:	d809      	bhi.n	80017f4 <SysTick_Handler+0xd8>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e6:	486a      	ldr	r0, [pc, #424]	; (8001990 <SysTick_Handler+0x274>)
 80017e8:	f000 fc00 	bl	8001fec <HAL_GPIO_WritePin>
//		TIM2->CCR1=300;
//		TIM2->CCR2=0;
		r = 1;
 80017ec:	4b69      	ldr	r3, [pc, #420]	; (8001994 <SysTick_Handler+0x278>)
 80017ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017f2:	601a      	str	r2, [r3, #0]

	}
	if ( (ii >= 100) && (ii <= 199) ) {
 80017f4:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <SysTick_Handler+0x258>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b63      	cmp	r3, #99	; 0x63
 80017fa:	d90d      	bls.n	8001818 <SysTick_Handler+0xfc>
 80017fc:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <SysTick_Handler+0x258>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2bc7      	cmp	r3, #199	; 0xc7
 8001802:	d809      	bhi.n	8001818 <SysTick_Handler+0xfc>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180a:	4861      	ldr	r0, [pc, #388]	; (8001990 <SysTick_Handler+0x274>)
 800180c:	f000 fbee 	bl	8001fec <HAL_GPIO_WritePin>
//		TIM2->CCR1=700;
//		TIM2->CCR2=0;
		r = 2;
 8001810:	4b60      	ldr	r3, [pc, #384]	; (8001994 <SysTick_Handler+0x278>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001816:	601a      	str	r2, [r3, #0]
	}
	 // Comparator (Error)
	 e = r - vel;
 8001818:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <SysTick_Handler+0x278>)
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	4b54      	ldr	r3, [pc, #336]	; (8001970 <SysTick_Handler+0x254>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	4b5b      	ldr	r3, [pc, #364]	; (8001998 <SysTick_Handler+0x27c>)
 800182a:	edc3 7a00 	vstr	s15, [r3]
	 //Control Law (Proportional)

	 u = ((Kp + (Ki*Ts))*e) - (Kp * e_old) + u_old;
 800182e:	4b5b      	ldr	r3, [pc, #364]	; (800199c <SysTick_Handler+0x280>)
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	4b5a      	ldr	r3, [pc, #360]	; (80019a0 <SysTick_Handler+0x284>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <SysTick_Handler+0x288>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <SysTick_Handler+0x27c>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001852:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <SysTick_Handler+0x288>)
 8001854:	edd3 6a00 	vldr	s13, [r3]
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <SysTick_Handler+0x28c>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <SysTick_Handler+0x290>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <SysTick_Handler+0x294>)
 8001872:	edc3 7a00 	vstr	s15, [r3]

	// Control action execution
	if (u>1){
 8001876:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <SysTick_Handler+0x294>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd04      	ble.n	8001894 <SysTick_Handler+0x178>
		u=1;
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <SysTick_Handler+0x294>)
 800188c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e00c      	b.n	80018ae <SysTick_Handler+0x192>
	}else if(u<-1) {
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <SysTick_Handler+0x294>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800189e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	d502      	bpl.n	80018ae <SysTick_Handler+0x192>
		u=-1;
 80018a8:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <SysTick_Handler+0x294>)
 80018aa:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <SysTick_Handler+0x298>)
 80018ac:	601a      	str	r2, [r3, #0]
	}
	if (u < 0){
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <SysTick_Handler+0x294>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d514      	bpl.n	80018e8 <SysTick_Handler+0x1cc>
		TIM2->CCR1=0;
 80018be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018c2:	2200      	movs	r2, #0
 80018c4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2=(-u)*1000;
 80018c6:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <SysTick_Handler+0x294>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	eef1 7a67 	vneg.f32	s15, s15
 80018d0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80019b8 <SysTick_Handler+0x29c>
 80018d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e0:	ee17 2a90 	vmov	r2, s15
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
 80018e6:	e011      	b.n	800190c <SysTick_Handler+0x1f0>
	}else{
		TIM2->CCR1=u*1000;
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <SysTick_Handler+0x294>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80019b8 <SysTick_Handler+0x29c>
 80018f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fe:	ee17 2a90 	vmov	r2, s15
 8001902:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2=0;
 8001904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001908:	2200      	movs	r2, #0
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	ii++;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <SysTick_Handler+0x258>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a18      	ldr	r2, [pc, #96]	; (8001974 <SysTick_Handler+0x258>)
 8001914:	6013      	str	r3, [r2, #0]
	if (ii == 200) {
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <SysTick_Handler+0x258>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2bc8      	cmp	r3, #200	; 0xc8
 800191c:	d102      	bne.n	8001924 <SysTick_Handler+0x208>
		ii=0;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <SysTick_Handler+0x258>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
	}

	//  update variables
	pold = pnew;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <SysTick_Handler+0x23c>)
 8001926:	f9b3 2000 	ldrsh.w	r2, [r3]
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <SysTick_Handler+0x24c>)
 800192c:	801a      	strh	r2, [r3, #0]
	velold = vel;
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <SysTick_Handler+0x254>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a16      	ldr	r2, [pc, #88]	; (800198c <SysTick_Handler+0x270>)
 8001934:	6013      	str	r3, [r2, #0]
	e_old = e;
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <SysTick_Handler+0x27c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <SysTick_Handler+0x28c>)
 800193c:	6013      	str	r3, [r2, #0]
	u_old = u;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <SysTick_Handler+0x294>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1a      	ldr	r2, [pc, #104]	; (80019ac <SysTick_Handler+0x290>)
 8001944:	6013      	str	r3, [r2, #0]
	DumpTrace();	// Send data to stm32CubeMonitor buffer
 8001946:	f7ff f9eb 	bl	8000d20 <DumpTrace>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194a:	f000 f8c5 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40000400 	.word	0x40000400
 8001958:	20000a74 	.word	0x20000a74
 800195c:	46e10000 	.word	0x46e10000
 8001960:	43b40000 	.word	0x43b40000
 8001964:	20000d9c 	.word	0x20000d9c
 8001968:	20000a76 	.word	0x20000a76
 800196c:	43480000 	.word	0x43480000
 8001970:	20000da0 	.word	0x20000da0
 8001974:	20000a70 	.word	0x20000a70
 8001978:	20000a7c 	.word	0x20000a7c
 800197c:	20000a7a 	.word	0x20000a7a
 8001980:	42480000 	.word	0x42480000
 8001984:	c2480000 	.word	0xc2480000
 8001988:	20000a78 	.word	0x20000a78
 800198c:	20000da4 	.word	0x20000da4
 8001990:	40020800 	.word	0x40020800
 8001994:	20000db0 	.word	0x20000db0
 8001998:	20000db4 	.word	0x20000db4
 800199c:	200000bc 	.word	0x200000bc
 80019a0:	200000c0 	.word	0x200000c0
 80019a4:	200000b8 	.word	0x200000b8
 80019a8:	20000db8 	.word	0x20000db8
 80019ac:	20000dac 	.word	0x20000dac
 80019b0:	20000da8 	.word	0x20000da8
 80019b4:	bf800000 	.word	0xbf800000
 80019b8:	447a0000 	.word	0x447a0000

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x12>
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1a>)
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1e>)
 80019ea:	2300      	movs	r3, #0
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:
 80019ee:	58d4      	ldr	r4, [r2, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:
 80019f4:	18c4      	adds	r4, r0, r3
 80019f6:	428c      	cmp	r4, r1
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x22>)
 80019fc:	4c0b      	ldr	r4, [pc, #44]	; (8001a2c <LoopFillZerobss+0x26>)
 80019fe:	2300      	movs	r3, #0
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:
 8001a06:	42a2      	cmp	r2, r4
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>
 8001a0a:	f7ff ffd7 	bl	80019bc <SystemInit>
 8001a0e:	f001 fe8f 	bl	8003730 <__libc_init_array>
 8001a12:	f7ff fbc9 	bl	80011a8 <main>
 8001a16:	4770      	bx	lr
 8001a18:	20010000 	.word	0x20010000
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	200000d0 	.word	0x200000d0
 8001a24:	080037b0 	.word	0x080037b0
 8001a28:	200000d0 	.word	0x200000d0
 8001a2c:	20000dc0 	.word	0x20000dc0

08001a30 <ADC_IRQHandler>:
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_Init+0x40>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_Init+0x40>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_Init+0x40>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f90d 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fd6c 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f917 	bl	8001cca <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f8ed 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000c4 	.word	0x200000c4
 8001ad0:	200000cc 	.word	0x200000cc
 8001ad4:	200000c8 	.word	0x200000c8

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200000cc 	.word	0x200000cc
 8001afc:	20000dbc 	.word	0x20000dbc

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000dbc 	.word	0x20000dbc

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff47 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff5c 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffb0 	bl	8001c38 <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e159      	b.n	8001fb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8148 	bne.w	8001fae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d005      	beq.n	8001d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d017      	beq.n	8001dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a2 	beq.w	8001fae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a56      	ldr	r2, [pc, #344]	; (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b54      	ldr	r3, [pc, #336]	; (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e86:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_GPIO_Init+0x2ec>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a49      	ldr	r2, [pc, #292]	; (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x202>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <HAL_GPIO_Init+0x2f4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x1fe>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a47      	ldr	r2, [pc, #284]	; (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x1fa>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a46      	ldr	r2, [pc, #280]	; (8001fe0 <HAL_GPIO_Init+0x2fc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x1f6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <HAL_GPIO_Init+0x300>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x1f2>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x204>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef8:	4935      	ldr	r1, [pc, #212]	; (8001fd0 <HAL_GPIO_Init+0x2ec>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5a:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <HAL_GPIO_Init+0x304>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	f67f aea2 	bls.w	8001d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40013c00 	.word	0x40013c00

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002008:	e003      	b.n	8002012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800200a:	887b      	ldrh	r3, [r7, #2]
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e267      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d075      	beq.n	800212a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00c      	beq.n	8002064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204a:	4b85      	ldr	r3, [pc, #532]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002052:	2b08      	cmp	r3, #8
 8002054:	d112      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4b82      	ldr	r3, [pc, #520]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002062:	d10b      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05b      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d157      	bne.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e242      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x74>
 8002086:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a75      	ldr	r2, [pc, #468]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e01d      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4b70      	ldr	r3, [pc, #448]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6f      	ldr	r2, [pc, #444]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6c      	ldr	r2, [pc, #432]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 80020b8:	4b69      	ldr	r3, [pc, #420]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a68      	ldr	r2, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b66      	ldr	r3, [pc, #408]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a65      	ldr	r2, [pc, #404]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fd12 	bl	8001b00 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fd0e 	bl	8001b00 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e207      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fcfe 	bl	8001b00 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fcfa 	bl	8001b00 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1f3      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	4b51      	ldr	r3, [pc, #324]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0xe8>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d063      	beq.n	80021fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214a:	2b08      	cmp	r3, #8
 800214c:	d11c      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e1c7      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4937      	ldr	r1, [pc, #220]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	e03a      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_RCC_OscConfig+0x244>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff fcb3 	bl	8001b00 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff fcaf 	bl	8001b00 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1a8      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4925      	ldr	r1, [pc, #148]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_OscConfig+0x244>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff fc92 	bl	8001b00 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e0:	f7ff fc8e 	bl	8001b00 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e187      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d036      	beq.n	8002278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_RCC_OscConfig+0x248>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff fc72 	bl	8001b00 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fc6e 	bl	8001b00 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e167      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_OscConfig+0x240>)
 8002234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x200>
 800223e:	e01b      	b.n	8002278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_OscConfig+0x248>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff fc5b 	bl	8001b00 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	e00e      	b.n	800226c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224e:	f7ff fc57 	bl	8001b00 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d907      	bls.n	800226c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e150      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
 8002260:	40023800 	.word	0x40023800
 8002264:	42470000 	.word	0x42470000
 8002268:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ea      	bne.n	800224e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8097 	beq.w	80023b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a7c      	ldr	r2, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b77      	ldr	r3, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b74      	ldr	r3, [pc, #464]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a73      	ldr	r2, [pc, #460]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fc17 	bl	8001b00 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7ff fc13 	bl	8001b00 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e10c      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x474>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x2ea>
 80022fc:	4b64      	ldr	r3, [pc, #400]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	4a63      	ldr	r2, [pc, #396]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6713      	str	r3, [r2, #112]	; 0x70
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x324>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x30c>
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a5e      	ldr	r2, [pc, #376]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	4a5b      	ldr	r2, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6713      	str	r3, [r2, #112]	; 0x70
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0x324>
 800232c:	4b58      	ldr	r3, [pc, #352]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a57      	ldr	r2, [pc, #348]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	4b55      	ldr	r3, [pc, #340]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	4a54      	ldr	r2, [pc, #336]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800233e:	f023 0304 	bic.w	r3, r3, #4
 8002342:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d015      	beq.n	8002378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff fbd8 	bl	8001b00 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7ff fbd4 	bl	8001b00 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0cb      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ee      	beq.n	8002354 <HAL_RCC_OscConfig+0x334>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff fbc2 	bl	8001b00 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7ff fbbe 	bl	8001b00 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0b5      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ee      	bne.n	8002380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	4a38      	ldr	r2, [pc, #224]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a1 	beq.w	8002500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d05c      	beq.n	8002484 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d141      	bne.n	8002456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_OscConfig+0x478>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fb92 	bl	8001b00 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff fb8e 	bl	8001b00 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e087      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	041b      	lsls	r3, r3, #16
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	491b      	ldr	r1, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x478>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff fb67 	bl	8001b00 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fb63 	bl	8001b00 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e05c      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x416>
 8002454:	e054      	b.n	8002500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_OscConfig+0x478>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fb50 	bl	8001b00 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff fb4c 	bl	8001b00 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e045      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCC_OscConfig+0x470>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x444>
 8002482:	e03d      	b.n	8002500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e038      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x4ec>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d028      	beq.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d121      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d11a      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0cc      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d90c      	bls.n	800254c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d044      	beq.n	8002630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d119      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e067      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4934      	ldr	r1, [pc, #208]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002600:	f7ff fa7e 	bl	8001b00 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7ff fa7a 	bl	8001b00 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e04f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d20c      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f9de 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08003790 	.word	0x08003790
 80026d4:	200000c4 	.word	0x200000c4
 80026d8:	200000c8 	.word	0x200000c8

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e0:	b090      	sub	sp, #64	; 0x40
 80026e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
 80026e8:	2300      	movs	r3, #0
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d00d      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x40>
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 80a1 	bhi.w	8002848 <HAL_RCC_GetSysClockFreq+0x16c>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 800270a:	2b04      	cmp	r3, #4
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x3a>
 800270e:	e09b      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_GetSysClockFreq+0x184>)
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002714:	e09b      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002716:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCC_GetSysClockFreq+0x188>)
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800271a:	e098      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002726:	4b4d      	ldr	r3, [pc, #308]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d028      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	627a      	str	r2, [r7, #36]	; 0x24
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002744:	2100      	movs	r1, #0
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <HAL_RCC_GetSysClockFreq+0x188>)
 8002748:	fb03 f201 	mul.w	r2, r3, r1
 800274c:	2300      	movs	r3, #0
 800274e:	fb00 f303 	mul.w	r3, r0, r3
 8002752:	4413      	add	r3, r2
 8002754:	4a43      	ldr	r2, [pc, #268]	; (8002864 <HAL_RCC_GetSysClockFreq+0x188>)
 8002756:	fba0 1202 	umull	r1, r2, r0, r2
 800275a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800275c:	460a      	mov	r2, r1
 800275e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	4413      	add	r3, r2
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	2200      	movs	r2, #0
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	61fa      	str	r2, [r7, #28]
 800276e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002772:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002776:	f7fd fd2d 	bl	80001d4 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4613      	mov	r3, r2
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002782:	e053      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	2200      	movs	r2, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	617a      	str	r2, [r7, #20]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002796:	f04f 0b00 	mov.w	fp, #0
 800279a:	4652      	mov	r2, sl
 800279c:	465b      	mov	r3, fp
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	0159      	lsls	r1, r3, #5
 80027a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ac:	0150      	lsls	r0, r2, #5
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	ebb2 080a 	subs.w	r8, r2, sl
 80027b6:	eb63 090b 	sbc.w	r9, r3, fp
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ce:	ebb2 0408 	subs.w	r4, r2, r8
 80027d2:	eb63 0509 	sbc.w	r5, r3, r9
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	00eb      	lsls	r3, r5, #3
 80027e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e4:	00e2      	lsls	r2, r4, #3
 80027e6:	4614      	mov	r4, r2
 80027e8:	461d      	mov	r5, r3
 80027ea:	eb14 030a 	adds.w	r3, r4, sl
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	eb45 030b 	adc.w	r3, r5, fp
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002802:	4629      	mov	r1, r5
 8002804:	028b      	lsls	r3, r1, #10
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800280c:	4621      	mov	r1, r4
 800280e:	028a      	lsls	r2, r1, #10
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	2200      	movs	r2, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	60fa      	str	r2, [r7, #12]
 800281c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002820:	f7fd fcd8 	bl	80001d4 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	3301      	adds	r3, #1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800283c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002846:	e002      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetSysClockFreq+0x184>)
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800284c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002850:	4618      	mov	r0, r3
 8002852:	3740      	adds	r7, #64	; 0x40
 8002854:	46bd      	mov	sp, r7
 8002856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	00f42400 	.word	0x00f42400
 8002864:	017d7840 	.word	0x017d7840

08002868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_RCC_GetHCLKFreq+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	200000c4 	.word	0x200000c4

08002880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e041      	b.n	8002916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fe74 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 fbf4 	bl	80030ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e041      	b.n	80029b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f839 	bl	80029bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f000 fba5 	bl	80030ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_TIM_PWM_Start+0x24>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e022      	b.n	8002a3a <HAL_TIM_PWM_Start+0x6a>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d109      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x3e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e015      	b.n	8002a3a <HAL_TIM_PWM_Start+0x6a>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d109      	bne.n	8002a28 <HAL_TIM_PWM_Start+0x58>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e008      	b.n	8002a3a <HAL_TIM_PWM_Start+0x6a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e068      	b.n	8002b14 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <HAL_TIM_PWM_Start+0x82>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a50:	e013      	b.n	8002a7a <HAL_TIM_PWM_Start+0xaa>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x92>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a60:	e00b      	b.n	8002a7a <HAL_TIM_PWM_Start+0xaa>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d104      	bne.n	8002a72 <HAL_TIM_PWM_Start+0xa2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a70:	e003      	b.n	8002a7a <HAL_TIM_PWM_Start+0xaa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fdb8 	bl	80035f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a23      	ldr	r2, [pc, #140]	; (8002b1c <HAL_TIM_PWM_Start+0x14c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d107      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_TIM_PWM_Start+0x14c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d018      	beq.n	8002ade <HAL_TIM_PWM_Start+0x10e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d013      	beq.n	8002ade <HAL_TIM_PWM_Start+0x10e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_TIM_PWM_Start+0x150>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00e      	beq.n	8002ade <HAL_TIM_PWM_Start+0x10e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <HAL_TIM_PWM_Start+0x154>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_TIM_PWM_Start+0x10e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_TIM_PWM_Start+0x158>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d004      	beq.n	8002ade <HAL_TIM_PWM_Start+0x10e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_TIM_PWM_Start+0x15c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d111      	bne.n	8002b02 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d010      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b00:	e007      	b.n	8002b12 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40000c00 	.word	0x40000c00
 8002b2c:	40014000 	.word	0x40014000

08002b30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e097      	b.n	8002c74 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe fd3b 	bl	80015d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b74:	f023 0307 	bic.w	r3, r3, #7
 8002b78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f000 fa91 	bl	80030ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bd0:	f023 030c 	bic.w	r3, r3, #12
 8002bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	4313      	orrs	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	011a      	lsls	r2, r3, #4
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	031b      	lsls	r3, r3, #12
 8002c00:	4313      	orrs	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4313      	orrs	r3, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ca4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d110      	bne.n	8002cce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d102      	bne.n	8002cb8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cb2:	7b7b      	ldrb	r3, [r7, #13]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d001      	beq.n	8002cbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e069      	b.n	8002d90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	e031      	b.n	8002d32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d110      	bne.n	8002cf6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cd4:	7bbb      	ldrb	r3, [r7, #14]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cda:	7b3b      	ldrb	r3, [r7, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e055      	b.n	8002d90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf4:	e01d      	b.n	8002d32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cfc:	7bbb      	ldrb	r3, [r7, #14]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d02:	7b7b      	ldrb	r3, [r7, #13]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d08:	7b3b      	ldrb	r3, [r7, #12]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e03e      	b.n	8002d90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_TIM_Encoder_Start+0xc4>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d008      	beq.n	8002d50 <HAL_TIM_Encoder_Start+0xd4>
 8002d3e:	e00f      	b.n	8002d60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fc55 	bl	80035f8 <TIM_CCxChannelCmd>
      break;
 8002d4e:	e016      	b.n	8002d7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2201      	movs	r2, #1
 8002d56:	2104      	movs	r1, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fc4d 	bl	80035f8 <TIM_CCxChannelCmd>
      break;
 8002d5e:	e00e      	b.n	8002d7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fc45 	bl	80035f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	2104      	movs	r1, #4
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fc3e 	bl	80035f8 <TIM_CCxChannelCmd>
      break;
 8002d7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0ae      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	f200 809f 	bhi.w	8002f04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dc6:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	08002f05 	.word	0x08002f05
 8002dd4:	08002f05 	.word	0x08002f05
 8002dd8:	08002f05 	.word	0x08002f05
 8002ddc:	08002e41 	.word	0x08002e41
 8002de0:	08002f05 	.word	0x08002f05
 8002de4:	08002f05 	.word	0x08002f05
 8002de8:	08002f05 	.word	0x08002f05
 8002dec:	08002e83 	.word	0x08002e83
 8002df0:	08002f05 	.word	0x08002f05
 8002df4:	08002f05 	.word	0x08002f05
 8002df8:	08002f05 	.word	0x08002f05
 8002dfc:	08002ec3 	.word	0x08002ec3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9d0 	bl	80031ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0208 	orr.w	r2, r2, #8
 8002e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0204 	bic.w	r2, r2, #4
 8002e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	619a      	str	r2, [r3, #24]
      break;
 8002e3e:	e064      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa16 	bl	8003278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6999      	ldr	r1, [r3, #24]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	021a      	lsls	r2, r3, #8
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	619a      	str	r2, [r3, #24]
      break;
 8002e80:	e043      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fa61 	bl	8003350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0208 	orr.w	r2, r2, #8
 8002e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0204 	bic.w	r2, r2, #4
 8002eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69d9      	ldr	r1, [r3, #28]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	61da      	str	r2, [r3, #28]
      break;
 8002ec0:	e023      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 faab 	bl	8003424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69d9      	ldr	r1, [r3, #28]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	021a      	lsls	r2, r3, #8
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	61da      	str	r2, [r3, #28]
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIM_ConfigClockSource+0x1c>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e0b4      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x186>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f70:	d03e      	beq.n	8002ff0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f76:	f200 8087 	bhi.w	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7e:	f000 8086 	beq.w	800308e <HAL_TIM_ConfigClockSource+0x172>
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f86:	d87f      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b70      	cmp	r3, #112	; 0x70
 8002f8a:	d01a      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002f8c:	2b70      	cmp	r3, #112	; 0x70
 8002f8e:	d87b      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b60      	cmp	r3, #96	; 0x60
 8002f92:	d050      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x11a>
 8002f94:	2b60      	cmp	r3, #96	; 0x60
 8002f96:	d877      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b50      	cmp	r3, #80	; 0x50
 8002f9a:	d03c      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0xfa>
 8002f9c:	2b50      	cmp	r3, #80	; 0x50
 8002f9e:	d873      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d058      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x13a>
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d86f      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b30      	cmp	r3, #48	; 0x30
 8002faa:	d064      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	2b30      	cmp	r3, #48	; 0x30
 8002fae:	d86b      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d060      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d867      	bhi.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d05c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d05a      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc0:	e062      	b.n	8003088 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f000 faf1 	bl	80035b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
      break;
 8002fee:	e04f      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6899      	ldr	r1, [r3, #8]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f000 fada 	bl	80035b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003012:	609a      	str	r2, [r3, #8]
      break;
 8003014:	e03c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	461a      	mov	r2, r3
 8003024:	f000 fa4e 	bl	80034c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2150      	movs	r1, #80	; 0x50
 800302e:	4618      	mov	r0, r3
 8003030:	f000 faa7 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003034:	e02c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	461a      	mov	r2, r3
 8003044:	f000 fa6d 	bl	8003522 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2160      	movs	r1, #96	; 0x60
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fa97 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003054:	e01c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	461a      	mov	r2, r3
 8003064:	f000 fa2e 	bl	80034c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2140      	movs	r1, #64	; 0x40
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fa87 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003074:	e00c      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f000 fa7e 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003086:	e003      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e000      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800308e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <TIM_Base_SetConfig+0xe4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00f      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d00b      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a31      	ldr	r2, [pc, #196]	; (8003194 <TIM_Base_SetConfig+0xe8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d007      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a30      	ldr	r2, [pc, #192]	; (8003198 <TIM_Base_SetConfig+0xec>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x38>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <TIM_Base_SetConfig+0xf0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d108      	bne.n	80030f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a25      	ldr	r2, [pc, #148]	; (8003190 <TIM_Base_SetConfig+0xe4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01b      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d017      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a22      	ldr	r2, [pc, #136]	; (8003194 <TIM_Base_SetConfig+0xe8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a21      	ldr	r2, [pc, #132]	; (8003198 <TIM_Base_SetConfig+0xec>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00f      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <TIM_Base_SetConfig+0xf0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <TIM_Base_SetConfig+0xf4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <TIM_Base_SetConfig+0xf8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <TIM_Base_SetConfig+0xfc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d108      	bne.n	8003148 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <TIM_Base_SetConfig+0xe4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	615a      	str	r2, [r3, #20]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800

080031ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f023 0201 	bic.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0302 	bic.w	r3, r3, #2
 80031f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <TIM_OC1_SetConfig+0xc8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10c      	bne.n	8003222 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0308 	bic.w	r3, r3, #8
 800320e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a13      	ldr	r2, [pc, #76]	; (8003274 <TIM_OC1_SetConfig+0xc8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d111      	bne.n	800324e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40010000 	.word	0x40010000

08003278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0210 	bic.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0320 	bic.w	r3, r3, #32
 80032c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <TIM_OC2_SetConfig+0xd4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10d      	bne.n	80032f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <TIM_OC2_SetConfig+0xd4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d113      	bne.n	8003324 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800330a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000

08003350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <TIM_OC3_SetConfig+0xd0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10d      	bne.n	80033ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a14      	ldr	r2, [pc, #80]	; (8003420 <TIM_OC3_SetConfig+0xd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d113      	bne.n	80033fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40010000 	.word	0x40010000

08003424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800346e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <TIM_OC4_SetConfig+0x9c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d109      	bne.n	8003498 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000

080034c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f023 0201 	bic.w	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f023 030a 	bic.w	r3, r3, #10
 8003500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0210 	bic.w	r2, r3, #16
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800354c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	031b      	lsls	r3, r3, #12
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800355e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	f043 0307 	orr.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	021a      	lsls	r2, r3, #8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	431a      	orrs	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2201      	movs	r2, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003658:	2302      	movs	r3, #2
 800365a:	e050      	b.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d013      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10c      	bne.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40014000 	.word	0x40014000

08003720 <memset>:
 8003720:	4402      	add	r2, r0
 8003722:	4603      	mov	r3, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4d0d      	ldr	r5, [pc, #52]	; (8003768 <__libc_init_array+0x38>)
 8003734:	4c0d      	ldr	r4, [pc, #52]	; (800376c <__libc_init_array+0x3c>)
 8003736:	1b64      	subs	r4, r4, r5
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	2600      	movs	r6, #0
 800373c:	42a6      	cmp	r6, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	4d0b      	ldr	r5, [pc, #44]	; (8003770 <__libc_init_array+0x40>)
 8003742:	4c0c      	ldr	r4, [pc, #48]	; (8003774 <__libc_init_array+0x44>)
 8003744:	f000 f818 	bl	8003778 <_init>
 8003748:	1b64      	subs	r4, r4, r5
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	2600      	movs	r6, #0
 800374e:	42a6      	cmp	r6, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f855 3b04 	ldr.w	r3, [r5], #4
 8003758:	4798      	blx	r3
 800375a:	3601      	adds	r6, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003762:	4798      	blx	r3
 8003764:	3601      	adds	r6, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	080037a8 	.word	0x080037a8
 800376c:	080037a8 	.word	0x080037a8
 8003770:	080037a8 	.word	0x080037a8
 8003774:	080037ac 	.word	0x080037ac

08003778 <_init>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr

08003784 <_fini>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr
