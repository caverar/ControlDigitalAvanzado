%% Plant
clear
clc
s = tf('s');
plant_tf = 55.99/(s+33.95);
step_response_parameters = stepinfo(plant_tf);
plant_ts = step_response_parameters.RiseTime;

%step(plant_tf);
%% Plant Discretization
Ts = 0.005;
plant_tf_z = c2d(plant_tf,Ts,'zoh');

%% Control Parameters
Mp = 0.25;
Ev=0;
%% Ev=0 using K/((z-1)^2) compensator
z = tf('z',0.005);
% Se ajusta la ganacia k para lograr incrementar el margen de ganancia dado
% que esta muy alto para ajustarse solo con un compensador.
pre_ctrl_z = 0.001/((z-1)^2)
prectrl_plant_tf_z = series(pre_ctrl_z,plant_tf_z);
figure
%bode(prectrl_plant_tf_z);
%step(feedback(precontrolled_plant_tf,1))
 
%% W Transform
prectrl_plant_tf_w = w_transform.z2w(prectrl_plant_tf_z,Ts);
%bode(prectrl_plant_tf_z);
%hold on;
bode(prectrl_plant_tf_w);

%% Control Design (Lead)
required_pm = 40+17;
b = (1 + sind(required_pm))/(1-sind(required_pm ));
w_crossover_gain = -10*log(b);
w_crossover = 28.6; %rad/s
T2=1/(sqrt(b)*w_crossover);
lead_controller_tf_w = (1+(b*T2*s))/(1+(T2*s));
bode(series(lag_controller_tf_w,prectrl_plant_tf_w))
step()
%% Control Design (Lag)
required_pm = 40+6+17;
w_crossover_current_phase = 180-required_pm;
w_crossover = 34.8; %rad/s
w_crossover_current_gain = 29.1;
a = 10^(w_crossover_current_gain/20);
T1=10/(a*w_crossover);
lag_controller_tf_w = (1+(a*T1*s))/(1+(T1*s))

bode(series(lag_controller_tf_w,prectrl_plant_tf_w))


%b = (1 + sind(required_pm))/(1-sind(required_pm ))
%w_crossover_gain = -10*log(b)
%w_crossover = 35.2 %rad/s






%% utils functions

